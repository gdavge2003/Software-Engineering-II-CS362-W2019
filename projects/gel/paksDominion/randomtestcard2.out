
Running random generator tests for smithy...
# of Tests Ran: 100000
# of Tests Passed: 0
# of Cards Drawn Miscount: 99768
# of Deck Size Miscount: 99162
# of Played Cards Miscount: 0
# of Action Miscount: 100000

File 'dominion.c'
Lines executed:29.07% of 657
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
  5600084:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
  5600084:   11:  if (*(int*)a < *(int*)b)
  2000030:   12:    return -1;
  3600054:   13:  return 0;
  5600084:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        6:   23:  int* k = malloc(10 * sizeof(int));
        6:   24:  k[0] = k1;
        6:   25:  k[1] = k2;
        6:   26:  k[2] = k3;
        6:   27:  k[3] = k4;
        6:   28:  k[4] = k5;
        6:   29:  k[5] = k6;
        6:   30:  k[6] = k7;
        6:   31:  k[7] = k8;
        6:   32:  k[8] = k9;
        6:   33:  k[9] = k10;
        6:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   200003:   44:  SelectStream(1);
   200003:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
   400006:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   200003:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  4400066:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
 44000660:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
 38000570:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
 20000300:   65:        }
  2000030:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   200003:   73:  if (numPlayers == 2)
        -:   74:    {
   200003:   75:      state->supplyCount[curse] = 10;
   200003:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   200003:   87:  if (numPlayers == 2)
        -:   88:    {
   200003:   89:      state->supplyCount[estate] = 8;
   200003:   90:      state->supplyCount[duchy] = 8;
   200003:   91:      state->supplyCount[province] = 8;
   200003:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   200003:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   200003:  102:  state->supplyCount[silver] = 40;
   200003:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  8400126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
 66000990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
 31000465:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  3800060:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
   400003:  115:		  if (numPlayers == 2){ 
   400003:  116:		    state->supplyCount[i] = 8; 
   400003:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
   400003:  119:		}
        -:  120:	      else
        -:  121:		{
  1600027:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  2000030:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 29000435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
 29000435:  130:	}
        -:  131:
  4000060:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
  1200018:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
   400006:  140:      state->deckCount[i] = 0;
  3200048:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
  1200018:  143:	  state->deck[i][j] = estate;
  1200018:  144:	  state->deckCount[i]++;
  1200018:  145:	}
  6400096:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
  2800042:  148:	  state->deck[i][j] = copper;
  2800042:  149:	  state->deckCount[i]++;		
  2800042:  150:	}
   400006:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
  1200018:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
   400006:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
   400006:  160:    }
        -:  161:
        -:  162:  //draw player hands
  1200018:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   400006:  166:      state->handCount[i] = 0;
   400006:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
   400006:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
 11200168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
  5400081:  178:      state->embargoTokens[i] = 0;
  5400081:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   200003:  182:  state->outpostPlayed = 0;
   200003:  183:  state->phase = 0;
   200003:  184:  state->numActions = 1;
   200003:  185:  state->numBuys = 1;
   200003:  186:  state->playedCardCount = 0;
   200003:  187:  state->whoseTurn = 0;
   200003:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  2400036:  192:  for (it = 0; it < 5; it++){
  1000015:  193:    drawCard(state->whoseTurn, state);
  1000015:  194:  }
        -:  195:
   200003:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
   200003:  198:  return 0;
   200003:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   402229:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   402229:  209:  if (state->deckCount[player] < 1)
     2223:  210:    return -1;
   400006:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  8800132:  214:  while (state->deckCount[player] > 0) {
  4000060:  215:    card = floor(Random() * state->deckCount[player]);
  4000060:  216:    newDeck[newDeckPos] = state->deck[player][card];
  4000060:  217:    newDeckPos++;
 25600342:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  8800111:  219:      state->deck[player][i] = state->deck[player][i+1];
  8800111:  220:    }
  4000060:  221:    state->deckCount[player]--;
        -:  222:  }
  8800132:  223:  for (i = 0; i < newDeckPos; i++) {
  4000060:  224:    state->deck[player][i] = newDeck[i];
  4000060:  225:    state->deckCount[player]++;
  4000060:  226:  }
        -:  227:
   400006:  228:  return 0;
   402229:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
   400006:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        5:  406:	  j++;
        5:  407:	}
      100:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        5:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  1500025:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     4446:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
     2223:  538:    state->deckCount[player] = state->discardCount[player];
     2223:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     2223:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     2223:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     2223:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     2223:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     2223:  559:    if (deckCounter == 0)
     2223:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
  1497802:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  1497802:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1497802:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1497802:  576:    state->deckCount[player]--;
  1497802:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  1497802:  580:  return 0;
  1500025:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
   200003:  653:  int currentPlayer = whoseTurn(state);
   200003:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
   200003:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
   200003:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
   200003:  660:  int z = 0;// this is the counter for the temp hand
   200003:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
   200003:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      adventurerR(state); //Refactoring the code so these cards are implemented in their own functions. Functions are at the bottom of the page
    #####:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
       10:  675:      for (i = 0; i < 4; i++)
        -:  676:	{
        4:  677:	  drawCard(currentPlayer, state);
        4:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
        1:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
        6:  684:      for (i = 0; i < state->numPlayers; i++)
        -:  685:	{
        2:  686:	  if ( i != currentPlayer )
        -:  687:	    {
        1:  688:	      drawCard(i, state);
        1:  689:	    }
        2:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
        1:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
        1:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
    #####:  710:	if (supplyCount(choice1, state) <= 0){
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
    #####:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
    #####:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
    #####:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      mineR(state, choice1, choice2, handPos); //Refactoring the code so these cards are implemented in their own functions. Functions are at the bottom of the page
    #####:  755:      return 0;
        -:  756:      
        -:  757:    case remodel:
    #####:  758:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  759:
    #####:  760:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      gainCard(choice2, state, 0, currentPlayer);
        -:  766:
        -:  767:      //discard card from hand
    #####:  768:      discardCard(handPos, currentPlayer, state, 0);
        -:  769:
        -:  770:      //discard trashed card
    #####:  771:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  772:	{
    #####:  773:	  if (state->hand[currentPlayer][i] == j)
        -:  774:	    {
    #####:  775:	      discardCard(i, currentPlayer, state, 0);			
    #####:  776:	      break;
        -:  777:	    }
    #####:  778:	}
        -:  779:
        -:  780:
    #####:  781:      return 0;
        -:  782:		
        -:  783:    case smithy:
        -:  784:      //+3 Cards
   100001:  785:      smithyR(state, handPos); //Refactoring the code so these cards are implemented in their own functions. Functions are at the bottom of the page
   100001:  786:      return 0;
        -:  787:		
        -:  788:    case village: //Refactoring the code so these cards are implemented in their own functions. Functions are at the bottom of the page
   100001:  789:      villageR(state, handPos);
   100001:  790:      return 0;  
        -:  791:		
        -:  792:    case baron:
    #####:  793:      state->numBuys++;//Increase buys by 1!
    #####:  794:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  795:	int p = 0;//Iterator for hand!
    #####:  796:	int card_not_discarded = 1;//Flag for discard set!
    #####:  797:	while(card_not_discarded){
    #####:  798:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  799:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  800:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  801:	    state->discardCount[currentPlayer]++;
    #####:  802:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  803:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  804:	    }
    #####:  805:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  806:	    state->handCount[currentPlayer]--;
    #####:  807:	    card_not_discarded = 0;//Exit the loop
    #####:  808:	  }
    #####:  809:	  else if (p > state->handCount[currentPlayer]){
        -:  810:	    if(DEBUG) {
        -:  811:	      printf("No estate cards in your hand, invalid choice\n");
        -:  812:	      printf("Must gain an estate if there are any\n");
        -:  813:	    }
    #####:  814:	    if (supplyCount(estate, state) > 0){
    #####:  815:	      gainCard(estate, state, 0, currentPlayer);
    #####:  816:	      state->supplyCount[estate]--;//Decrement estates
    #####:  817:	      if (supplyCount(estate, state) == 0){
    #####:  818:		isGameOver(state);
    #####:  819:	      }
    #####:  820:	    }
    #####:  821:	    card_not_discarded = 0;//Exit the loop
    #####:  822:	  }
        -:  823:			    
        -:  824:	  else{
    #####:  825:	    p++;//Next card
        -:  826:	  }
        -:  827:	}
    #####:  828:      }
        -:  829:			    
        -:  830:      else{
    #####:  831:	if (supplyCount(estate, state) > 0){
    #####:  832:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  833:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  834:	  if (supplyCount(estate, state) == 0){
    #####:  835:	    isGameOver(state);
    #####:  836:	  }
    #####:  837:	}
        -:  838:      }
        -:  839:	    
        -:  840:      
    #####:  841:      return 0;
        -:  842:		
        -:  843:    case great_hall:
        -:  844:      //+1 Card
    #####:  845:      drawCard(currentPlayer, state);
        -:  846:			
        -:  847:      //+1 Actions
    #####:  848:      state->numActions++;
        -:  849:			
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
    #####:  852:      return 0;
        -:  853:		
        -:  854:    case minion:
        -:  855:      //+1 action
    #####:  856:      state->numActions++;
        -:  857:			
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
        -:  860:			
    #####:  861:      if (choice1)		//+2 coins
        -:  862:	{
    #####:  863:	  state->coins = state->coins + 2;
    #####:  864:	}
        -:  865:			
    #####:  866:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  867:	{
        -:  868:	  //discard hand
    #####:  869:	  while(numHandCards(state) > 0)
        -:  870:	    {
    #####:  871:	      discardCard(handPos, currentPlayer, state, 0);
        -:  872:	    }
        -:  873:				
        -:  874:	  //draw 4
    #####:  875:	  for (i = 0; i < 4; i++)
        -:  876:	    {
    #####:  877:	      drawCard(currentPlayer, state);
    #####:  878:	    }
        -:  879:				
        -:  880:	  //other players discard hand and redraw if hand size > 4
    #####:  881:	  for (i = 0; i < state->numPlayers; i++)
        -:  882:	    {
    #####:  883:	      if (i != currentPlayer)
        -:  884:		{
    #####:  885:		  if ( state->handCount[i] > 4 )
        -:  886:		    {
        -:  887:		      //discard hand
    #####:  888:		      while( state->handCount[i] > 0 )
        -:  889:			{
    #####:  890:			  discardCard(handPos, i, state, 0);
        -:  891:			}
        -:  892:							
        -:  893:		      //draw 4
    #####:  894:		      for (j = 0; j < 4; j++)
        -:  895:			{
    #####:  896:			  drawCard(i, state);
    #####:  897:			}
    #####:  898:		    }
    #####:  899:		}
    #####:  900:	    }
        -:  901:				
    #####:  902:	}
    #####:  903:      return 0;
        -:  904:		
        -:  905:    case steward: //Refactoring the code so these cards are implemented in their own functions. Functions are at the bottom of the page
    #####:  906:      stewardR(state, choice1, choice2, choice3, handPos);
    #####:  907:      return 0;
        -:  908:		
        -:  909:    case tribute:
    #####:  910:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  911:	if (state->deckCount[nextPlayer] > 0){
    #####:  912:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	  state->deckCount[nextPlayer]--;
    #####:  914:	}
    #####:  915:	else if (state->discardCount[nextPlayer] > 0){
    #####:  916:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  917:	  state->discardCount[nextPlayer]--;
    #####:  918:	}
        -:  919:	else{
        -:  920:	  //No Card to Reveal
        -:  921:	  if (DEBUG){
        -:  922:	    printf("No cards to reveal\n");
        -:  923:	  }
        -:  924:	}
    #####:  925:      }
        -:  926:	    
        -:  927:      else{
    #####:  928:	if (state->deckCount[nextPlayer] == 0){
    #####:  929:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  930:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  931:	    state->deckCount[nextPlayer]++;
    #####:  932:	    state->discard[nextPlayer][i] = -1;
    #####:  933:	    state->discardCount[nextPlayer]--;
    #####:  934:	  }
        -:  935:			    
    #####:  936:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  937:	} 
    #####:  938:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
    #####:  941:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  943:	state->deckCount[nextPlayer]--;
        -:  944:      }    
        -:  945:		       
    #####:  946:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  947:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  948:	state->playedCardCount++;
    #####:  949:	tributeRevealedCards[1] = -1;
    #####:  950:      }
        -:  951:
    #####:  952:      for (i = 0; i <= 2; i ++){
    #####:  953:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  954:	  state->coins += 2;
    #####:  955:	}
        -:  956:		    
    #####:  957:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  958:	  drawCard(currentPlayer, state);
    #####:  959:	  drawCard(currentPlayer, state);
    #####:  960:	}
        -:  961:	else{//Action Card
    #####:  962:	  state->numActions = state->numActions + 2;
        -:  963:	}
    #####:  964:      }
        -:  965:	    
    #####:  966:      return 0;
        -:  967:		
        -:  968:    case ambassador:
    #####:  969:      j = 0;		//used to check if player has enough cards to discard
        -:  970:
    #####:  971:      if (choice2 > 2 || choice2 < 0)
        -:  972:	{
    #####:  973:	  return -1;				
        -:  974:	}
        -:  975:
    #####:  976:      if (choice1 == handPos)
        -:  977:	{
    #####:  978:	  return -1;
        -:  979:	}
        -:  980:
    #####:  981:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:	{
    #####:  983:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  984:	    {
    #####:  985:	      j++;
    #####:  986:	    }
    #####:  987:	}
    #####:  988:      if (j < choice2)
        -:  989:	{
    #####:  990:	  return -1;				
        -:  991:	}
        -:  992:
        -:  993:      if (DEBUG) 
        -:  994:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  995:
        -:  996:      //increase supply count for choosen card by amount being discarded
    #####:  997:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  998:			
        -:  999:      //each other player gains a copy of revealed card
    #####: 1000:      for (i = 0; i < state->numPlayers; i++)
        -: 1001:	{
    #####: 1002:	  if (i != currentPlayer)
        -: 1003:	    {
    #####: 1004:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1005:	    }
    #####: 1006:	}
        -: 1007:
        -: 1008:      //discard played card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1010:
        -: 1011:      //trash copies of cards returned to supply
    #####: 1012:      for (j = 0; j < choice2; j++)
        -: 1013:	{
    #####: 1014:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1015:	    {
    #####: 1016:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1017:		{
    #####: 1018:		  discardCard(i, currentPlayer, state, 1);
    #####: 1019:		  break;
        -: 1020:		}
    #####: 1021:	    }
    #####: 1022:	}			
        -: 1023:
    #####: 1024:      return 0;
        -: 1025:		
        -: 1026:    case cutpurse:
        -: 1027:
    #####: 1028:      updateCoins(currentPlayer, state, 2);
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
        -: 1032:	    {
    #####: 1033:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1034:		{
    #####: 1035:		  if (state->hand[i][j] == copper)
        -: 1036:		    {
    #####: 1037:		      discardCard(j, i, state, 0);
    #####: 1038:		      break;
        -: 1039:		    }
    #####: 1040:		  if (j == state->handCount[i])
        -: 1041:		    {
    #####: 1042:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1043:			{
        -: 1044:			  if (DEBUG)
        -: 1045:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1046:			}	
    #####: 1047:		      break;
        -: 1048:		    }		
    #####: 1049:		}
        -: 1050:					
    #####: 1051:	    }
        -: 1052:				
    #####: 1053:	}				
        -: 1054:
        -: 1055:      //discard played card from hand
    #####: 1056:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1057:
    #####: 1058:      return 0;
        -: 1059:
        -: 1060:		
        -: 1061:    case embargo: 
        -: 1062:      //+2 Coins
    #####: 1063:      state->coins = state->coins + 2;
        -: 1064:			
        -: 1065:      //see if selected pile is in play
    #####: 1066:      if ( state->supplyCount[choice1] == -1 )
        -: 1067:	{
    #####: 1068:	  return -1;
        -: 1069:	}
        -: 1070:			
        -: 1071:      //add embargo token to selected supply pile
    #####: 1072:      state->embargoTokens[choice1]++;
        -: 1073:			
        -: 1074:      //trash card
    #####: 1075:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case outpost:
        -: 1079:      //set outpost flag
    #####: 1080:      state->outpostPlayed++;
        -: 1081:			
        -: 1082:      //discard card
    #####: 1083:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case salvager:
        -: 1087:      //+1 buy
    #####: 1088:      state->numBuys++;
        -: 1089:			
    #####: 1090:      if (choice1)
        -: 1091:	{
        -: 1092:	  //gain coins equal to trashed card
    #####: 1093:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1094:	  //trash card
    #####: 1095:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1096:	}
        -: 1097:			
        -: 1098:      //discard card
    #####: 1099:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1100:      return 0;
        -: 1101:		
        -: 1102:    case sea_hag:
    #####: 1103:      for (i = 0; i < state->numPlayers; i++){
    #####: 1104:	if (i != currentPlayer){
    #####: 1105:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1106:	  state->discardCount[i]++;
    #####: 1107:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1108:	}
    #####: 1109:      }
    #####: 1110:      return 0;
        -: 1111:		
        -: 1112:    case treasure_map:
        -: 1113:      //search hand for another treasure_map
    #####: 1114:      index = -1;
    #####: 1115:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1116:	{
    #####: 1117:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1118:	    {
    #####: 1119:	      index = i;
    #####: 1120:	      break;
        -: 1121:	    }
    #####: 1122:	}
    #####: 1123:      if (index > -1)
        -: 1124:	{
        -: 1125:	  //trash both treasure cards
    #####: 1126:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1127:	  discardCard(index, currentPlayer, state, 1);
        -: 1128:
        -: 1129:	  //gain 4 Gold cards
    #####: 1130:	  for (i = 0; i < 4; i++)
        -: 1131:	    {
    #####: 1132:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1133:	    }
        -: 1134:				
        -: 1135:	  //return success
    #####: 1136:	  return 1;
        -: 1137:	}
        -: 1138:			
        -: 1139:      //no second treasure_map found in hand
    #####: 1140:      return -1;
        -: 1141:    }
        -: 1142:	
    #####: 1143:  return -1;
   200003: 1144:}
        -: 1145:
        -: 1146:
        -: 1147:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1148:{
        -: 1149:	
        -: 1150:  //if card is not trashed, added to Played pile 
   200003: 1151:  if (trashFlag < 1)
        -: 1152:    {
        -: 1153:      //add card to played pile
   200003: 1154:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   200003: 1155:      state->playedCardCount++;
   200003: 1156:    }
        -: 1157:	
        -: 1158:  //set played card to -1
   200003: 1159:  state->hand[currentPlayer][handPos] = -1;
        -: 1160:	
        -: 1161:  //remove card from player's hand
   200003: 1162:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1163:    {
        -: 1164:      //reduce number of cards in hand
    #####: 1165:      state->handCount[currentPlayer]--;
    #####: 1166:    }
   200003: 1167:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1168:    {
        -: 1169:      //reduce number of cards in hand
    #####: 1170:      state->handCount[currentPlayer]--;
    #####: 1171:    }
        -: 1172:  else 	
        -: 1173:    {
        -: 1174:      //replace discarded card with last card in hand
   200003: 1175:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1176:      //set last card to -1
   200003: 1177:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1178:      //reduce number of cards in hand
   200003: 1179:      state->handCount[currentPlayer]--;
        -: 1180:    }
        -: 1181:	
   200003: 1182:  return 0;
        -: 1183:}
        -: 1184:
        -: 1185:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1186:{
        -: 1187:  //Note: supplyPos is enum of choosen card
        -: 1188:	
        -: 1189:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1190:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1191:    {
    #####: 1192:      return -1;
        -: 1193:    }
        -: 1194:	
        -: 1195:  //added card for [whoseTurn] current player:
        -: 1196:  // toFlag = 0 : add to discard
        -: 1197:  // toFlag = 1 : add to deck
        -: 1198:  // toFlag = 2 : add to hand
        -: 1199:
    #####: 1200:  if (toFlag == 1)
        -: 1201:    {
    #####: 1202:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1203:      state->deckCount[player]++;
    #####: 1204:    }
    #####: 1205:  else if (toFlag == 2)
        -: 1206:    {
    #####: 1207:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1208:      state->handCount[player]++;
    #####: 1209:    }
        -: 1210:  else
        -: 1211:    {
    #####: 1212:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1213:      state->discardCount[player]++;
        -: 1214:    }
        -: 1215:	
        -: 1216:  //decrease number in supply pile
    #####: 1217:  state->supplyCount[supplyPos]--;
        -: 1218:	 
    #####: 1219:  return 0;
    #####: 1220:}
        -: 1221:
        -: 1222:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1223:{
        -: 1224:  int i;
        -: 1225:	
        -: 1226:  //reset coin count
   200007: 1227:  state->coins = 0;
        -: 1228:
        -: 1229:  //add coins for each Treasure card in player's hand
  2400068: 1230:  for (i = 0; i < state->handCount[player]; i++)
        -: 1231:    {
  1000027: 1232:      if (state->hand[player][i] == copper)
        -: 1233:	{
   600013: 1234:	  state->coins += 1;
   600013: 1235:	}
   400014: 1236:      else if (state->hand[player][i] == silver)
        -: 1237:	{
        1: 1238:	  state->coins += 2;
        1: 1239:	}
   400013: 1240:      else if (state->hand[player][i] == gold)
        -: 1241:	{
        5: 1242:	  state->coins += 3;
        5: 1243:	}	
  1000027: 1244:    }	
        -: 1245:
        -: 1246:  //add bonus
   200007: 1247:  state->coins += bonus;
        -: 1248:
   200007: 1249:  return 0;
        -: 1250:}
        -: 1251:
        -: 1252://placing refactored code in this section
        -: 1253:
        -: 1254:int adventurerR(struct gameState *state)
        -: 1255:{
        -: 1256:  //localizing variables needed for this function from the card effect function
    #####: 1257:  int currentPlayer = whoseTurn(state);
        -: 1258:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1259:  int drawntreasure=0;
        -: 1260:  int cardDrawn;
    #####: 1261:  int z = 0;// this is the counter for the temp hand
        -: 1262:
    #####: 1263:  while(drawntreasure<2){
    #####: 1264:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1265:    shuffle(currentPlayer, state);
    #####: 1266:  }
    #####: 1267:  drawCard(currentPlayer, state);
    #####: 1268:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1269:  //Bug 1:Lets introduce a bug where a copper card is not considered a treasure. This will not add to the drawnTreasure counter.
    #####: 1270:  if (/*cardDrawn == copper || */cardDrawn == silver || cardDrawn == gold)
    #####: 1271:    drawntreasure++;
        -: 1272:  else{
    #####: 1273:    temphand[z]=cardDrawn;
    #####: 1274:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1275:    z++;
        -: 1276:  }
        -: 1277:      }
    #####: 1278:      while(z-1>=0){
    #####: 1279:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1280:  z=z-1;
        -: 1281:      }
    #####: 1282:      return 0;
        -: 1283:}
        -: 1284:
        -: 1285:int smithyR(struct gameState *state, int handPos)
        -: 1286:{
        -: 1287:    int i;
   100001: 1288:    int currentPlayer = whoseTurn(state);
        -: 1289:    //Bug 2: instead of drawing 3, introducing a bug where 4 cards are drawn instead 
  1000010: 1290:    for (i = 0; i < 4; i++)
        -: 1291:  {
   400004: 1292:    drawCard(currentPlayer, state);
   400004: 1293:  }
        -: 1294:      
        -: 1295:      //discard card from hand
   100001: 1296:      discardCard(handPos, currentPlayer, state, 0);
   100001: 1297:      return 0;   
        -: 1298:}
        -: 1299:
        -: 1300:int mineR(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1301:{
        -: 1302:  int i;
        -: 1303:  int j;
        -: 1304:  int index;
    #####: 1305:  int currentPlayer = whoseTurn(state);
        -: 1306:
        -: 1307:
    #####: 1308:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1309:
    #####: 1310:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1311:  {
    #####: 1312:    return -1;
        -: 1313:  }
        -: 1314:    
    #####: 1315:      if (choice2 > treasure_map || choice2 < curse)
        -: 1316:  {
    #####: 1317:    return -1;
        -: 1318:  }
        -: 1319:
    #####: 1320:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1321:  {
    #####: 1322:    return -1;
        -: 1323:  }
        -: 1324:
    #####: 1325:      gainCard(choice2, state, 2, currentPlayer);
        -: 1326:
        -: 1327:      //discard card from hand
    #####: 1328:      discardCard(handPos, currentPlayer, state, 0);
        -: 1329:
        -: 1330:      //discard trashed card
    #####: 1331:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1332:  {
    #####: 1333:    if (state->hand[currentPlayer][i] == j)
        -: 1334:      {
    #####: 1335:        discardCard(i, currentPlayer, state, 0);      
    #####: 1336:        break;
        -: 1337:      }
    #####: 1338:  }
        -: 1339:      
    #####: 1340:      return 0;
        -: 1341:      
    #####: 1342:}
        -: 1343:
        -: 1344:int villageR(struct gameState *state, int handPos)
        -: 1345:{
   100001: 1346:  int currentPlayer = whoseTurn(state);
        -: 1347:
        -: 1348:  //+1 Draw
   100001: 1349:  drawCard(currentPlayer, state);
        -: 1350:      
        -: 1351:  //+2 Actions
   100001: 1352:  state->numActions = state->numActions + 22; //Bug 3: introducing a bug where instead of 2 more actions, player gets 22 actions
        -: 1353:      
        -: 1354:  //discard played card from hand
   100001: 1355:  discardCard(handPos, currentPlayer, state, 0);
   100001: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:int stewardR(struct gameState *state, int choice1, int choice2, int choice3, int handPos)
        -: 1360:{
    #####: 1361:  int currentPlayer = whoseTurn(state);
        -: 1362:  //Bug 4: Introducing a bug where both choice1 and choice2 are 2. This means at 1 it go to else statement.
        -: 1363:  //2 will go to the first if statement. 3 will behave normally. second if statement will never get called.
    #####: 1364:  if (choice1 == 2)//changed from 1 to 2
        -: 1365:  {
        -: 1366:    //+2 cards
    #####: 1367:    drawCard(currentPlayer, state);
    #####: 1368:    drawCard(currentPlayer, state);
    #####: 1369:  }
    #####: 1370:      else if (choice1 == 2)
        -: 1371:  {
        -: 1372:    //+2 coins
    #####: 1373:    state->coins = state->coins + 2;
    #####: 1374:  }
        -: 1375:      else
        -: 1376:  {
        -: 1377:    //trash 2 cards in hand
    #####: 1378:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1379:    discardCard(choice3, currentPlayer, state, 1);
        -: 1380:  }
        -: 1381:      
        -: 1382:      //discard card from hand
    #####: 1383:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1384:      return 0;
        -: 1385:}
        -: 1386://end of dominion.c
        -: 1387:

Running random generator tests for smithy...
# of Tests Ran: 100000
# of Tests Passed: 0
# of Cards Drawn Miscount: 99799
# of Deck Size Miscount: 99205
# of Played Cards Miscount: 0
# of Action Miscount: 100000

File 'dominion.c'
Lines executed:29.07% of 657
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
  5600084:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
  5600084:   11:  if (*(int*)a < *(int*)b)
  2000030:   12:    return -1;
  3600054:   13:  return 0;
  5600084:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        6:   23:  int* k = malloc(10 * sizeof(int));
        6:   24:  k[0] = k1;
        6:   25:  k[1] = k2;
        6:   26:  k[2] = k3;
        6:   27:  k[3] = k4;
        6:   28:  k[4] = k5;
        6:   29:  k[5] = k6;
        6:   30:  k[6] = k7;
        6:   31:  k[7] = k8;
        6:   32:  k[8] = k9;
        6:   33:  k[9] = k10;
        6:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   200003:   44:  SelectStream(1);
   200003:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
   400006:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   200003:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  4400066:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
 44000660:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
 38000570:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
 20000300:   65:        }
  2000030:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   200003:   73:  if (numPlayers == 2)
        -:   74:    {
   200003:   75:      state->supplyCount[curse] = 10;
   200003:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   200003:   87:  if (numPlayers == 2)
        -:   88:    {
   200003:   89:      state->supplyCount[estate] = 8;
   200003:   90:      state->supplyCount[duchy] = 8;
   200003:   91:      state->supplyCount[province] = 8;
   200003:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   200003:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   200003:  102:  state->supplyCount[silver] = 40;
   200003:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  8400126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
 66000990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
 31000465:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  3800060:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
   400003:  115:		  if (numPlayers == 2){ 
   400003:  116:		    state->supplyCount[i] = 8; 
   400003:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
   400003:  119:		}
        -:  120:	      else
        -:  121:		{
  1600027:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  2000030:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 29000435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
 29000435:  130:	}
        -:  131:
  4000060:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
  1200018:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
   400006:  140:      state->deckCount[i] = 0;
  3200048:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
  1200018:  143:	  state->deck[i][j] = estate;
  1200018:  144:	  state->deckCount[i]++;
  1200018:  145:	}
  6400096:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
  2800042:  148:	  state->deck[i][j] = copper;
  2800042:  149:	  state->deckCount[i]++;		
  2800042:  150:	}
   400006:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
  1200018:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
   400006:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
   400006:  160:    }
        -:  161:
        -:  162:  //draw player hands
  1200018:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   400006:  166:      state->handCount[i] = 0;
   400006:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
   400006:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
 11200168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
  5400081:  178:      state->embargoTokens[i] = 0;
  5400081:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   200003:  182:  state->outpostPlayed = 0;
   200003:  183:  state->phase = 0;
   200003:  184:  state->numActions = 1;
   200003:  185:  state->numBuys = 1;
   200003:  186:  state->playedCardCount = 0;
   200003:  187:  state->whoseTurn = 0;
   200003:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  2400036:  192:  for (it = 0; it < 5; it++){
  1000015:  193:    drawCard(state->whoseTurn, state);
  1000015:  194:  }
        -:  195:
   200003:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
   200003:  198:  return 0;
   200003:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   402154:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   402154:  209:  if (state->deckCount[player] < 1)
     2148:  210:    return -1;
   400006:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  8800132:  214:  while (state->deckCount[player] > 0) {
  4000060:  215:    card = floor(Random() * state->deckCount[player]);
  4000060:  216:    newDeck[newDeckPos] = state->deck[player][card];
  4000060:  217:    newDeckPos++;
 24400342:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  8200111:  219:      state->deck[player][i] = state->deck[player][i+1];
  8200111:  220:    }
  4000060:  221:    state->deckCount[player]--;
        -:  222:  }
  8800132:  223:  for (i = 0; i < newDeckPos; i++) {
  4000060:  224:    state->deck[player][i] = newDeck[i];
  4000060:  225:    state->deckCount[player]++;
  4000060:  226:  }
        -:  227:
   400006:  228:  return 0;
   402154:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
   400006:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        5:  406:	  j++;
        5:  407:	}
      100:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        5:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  1500025:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     4296:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
     2148:  538:    state->deckCount[player] = state->discardCount[player];
     2148:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     2148:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     2148:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     2148:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     2148:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     2148:  559:    if (deckCounter == 0)
     2148:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
  1497877:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  1497877:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1497877:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1497877:  576:    state->deckCount[player]--;
  1497877:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  1497877:  580:  return 0;
  1500025:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
   200003:  653:  int currentPlayer = whoseTurn(state);
   200003:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
   200003:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
   200003:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
   200003:  660:  int z = 0;// this is the counter for the temp hand
   200003:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
   200003:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      adventurerR(state); //Refactoring the code so these cards are implemented in their own functions. Functions are at the bottom of the page
    #####:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
       10:  675:      for (i = 0; i < 4; i++)
        -:  676:	{
        4:  677:	  drawCard(currentPlayer, state);
        4:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
        1:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
        6:  684:      for (i = 0; i < state->numPlayers; i++)
        -:  685:	{
        2:  686:	  if ( i != currentPlayer )
        -:  687:	    {
        1:  688:	      drawCard(i, state);
        1:  689:	    }
        2:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
        1:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
        1:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
    #####:  710:	if (supplyCount(choice1, state) <= 0){
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
    #####:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
    #####:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
    #####:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      mineR(state, choice1, choice2, handPos); //Refactoring the code so these cards are implemented in their own functions. Functions are at the bottom of the page
    #####:  755:      return 0;
        -:  756:      
        -:  757:    case remodel:
    #####:  758:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  759:
    #####:  760:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      gainCard(choice2, state, 0, currentPlayer);
        -:  766:
        -:  767:      //discard card from hand
    #####:  768:      discardCard(handPos, currentPlayer, state, 0);
        -:  769:
        -:  770:      //discard trashed card
    #####:  771:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  772:	{
    #####:  773:	  if (state->hand[currentPlayer][i] == j)
        -:  774:	    {
    #####:  775:	      discardCard(i, currentPlayer, state, 0);			
    #####:  776:	      break;
        -:  777:	    }
    #####:  778:	}
        -:  779:
        -:  780:
    #####:  781:      return 0;
        -:  782:		
        -:  783:    case smithy:
        -:  784:      //+3 Cards
   100001:  785:      smithyR(state, handPos); //Refactoring the code so these cards are implemented in their own functions. Functions are at the bottom of the page
   100001:  786:      return 0;
        -:  787:		
        -:  788:    case village: //Refactoring the code so these cards are implemented in their own functions. Functions are at the bottom of the page
   100001:  789:      villageR(state, handPos);
   100001:  790:      return 0;  
        -:  791:		
        -:  792:    case baron:
    #####:  793:      state->numBuys++;//Increase buys by 1!
    #####:  794:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  795:	int p = 0;//Iterator for hand!
    #####:  796:	int card_not_discarded = 1;//Flag for discard set!
    #####:  797:	while(card_not_discarded){
    #####:  798:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  799:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  800:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  801:	    state->discardCount[currentPlayer]++;
    #####:  802:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  803:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  804:	    }
    #####:  805:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  806:	    state->handCount[currentPlayer]--;
    #####:  807:	    card_not_discarded = 0;//Exit the loop
    #####:  808:	  }
    #####:  809:	  else if (p > state->handCount[currentPlayer]){
        -:  810:	    if(DEBUG) {
        -:  811:	      printf("No estate cards in your hand, invalid choice\n");
        -:  812:	      printf("Must gain an estate if there are any\n");
        -:  813:	    }
    #####:  814:	    if (supplyCount(estate, state) > 0){
    #####:  815:	      gainCard(estate, state, 0, currentPlayer);
    #####:  816:	      state->supplyCount[estate]--;//Decrement estates
    #####:  817:	      if (supplyCount(estate, state) == 0){
    #####:  818:		isGameOver(state);
    #####:  819:	      }
    #####:  820:	    }
    #####:  821:	    card_not_discarded = 0;//Exit the loop
    #####:  822:	  }
        -:  823:			    
        -:  824:	  else{
    #####:  825:	    p++;//Next card
        -:  826:	  }
        -:  827:	}
    #####:  828:      }
        -:  829:			    
        -:  830:      else{
    #####:  831:	if (supplyCount(estate, state) > 0){
    #####:  832:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  833:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  834:	  if (supplyCount(estate, state) == 0){
    #####:  835:	    isGameOver(state);
    #####:  836:	  }
    #####:  837:	}
        -:  838:      }
        -:  839:	    
        -:  840:      
    #####:  841:      return 0;
        -:  842:		
        -:  843:    case great_hall:
        -:  844:      //+1 Card
    #####:  845:      drawCard(currentPlayer, state);
        -:  846:			
        -:  847:      //+1 Actions
    #####:  848:      state->numActions++;
        -:  849:			
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
    #####:  852:      return 0;
        -:  853:		
        -:  854:    case minion:
        -:  855:      //+1 action
    #####:  856:      state->numActions++;
        -:  857:			
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
        -:  860:			
    #####:  861:      if (choice1)		//+2 coins
        -:  862:	{
    #####:  863:	  state->coins = state->coins + 2;
    #####:  864:	}
        -:  865:			
    #####:  866:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  867:	{
        -:  868:	  //discard hand
    #####:  869:	  while(numHandCards(state) > 0)
        -:  870:	    {
    #####:  871:	      discardCard(handPos, currentPlayer, state, 0);
        -:  872:	    }
        -:  873:				
        -:  874:	  //draw 4
    #####:  875:	  for (i = 0; i < 4; i++)
        -:  876:	    {
    #####:  877:	      drawCard(currentPlayer, state);
    #####:  878:	    }
        -:  879:				
        -:  880:	  //other players discard hand and redraw if hand size > 4
    #####:  881:	  for (i = 0; i < state->numPlayers; i++)
        -:  882:	    {
    #####:  883:	      if (i != currentPlayer)
        -:  884:		{
    #####:  885:		  if ( state->handCount[i] > 4 )
        -:  886:		    {
        -:  887:		      //discard hand
    #####:  888:		      while( state->handCount[i] > 0 )
        -:  889:			{
    #####:  890:			  discardCard(handPos, i, state, 0);
        -:  891:			}
        -:  892:							
        -:  893:		      //draw 4
    #####:  894:		      for (j = 0; j < 4; j++)
        -:  895:			{
    #####:  896:			  drawCard(i, state);
    #####:  897:			}
    #####:  898:		    }
    #####:  899:		}
    #####:  900:	    }
        -:  901:				
    #####:  902:	}
    #####:  903:      return 0;
        -:  904:		
        -:  905:    case steward: //Refactoring the code so these cards are implemented in their own functions. Functions are at the bottom of the page
    #####:  906:      stewardR(state, choice1, choice2, choice3, handPos);
    #####:  907:      return 0;
        -:  908:		
        -:  909:    case tribute:
    #####:  910:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  911:	if (state->deckCount[nextPlayer] > 0){
    #####:  912:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	  state->deckCount[nextPlayer]--;
    #####:  914:	}
    #####:  915:	else if (state->discardCount[nextPlayer] > 0){
    #####:  916:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  917:	  state->discardCount[nextPlayer]--;
    #####:  918:	}
        -:  919:	else{
        -:  920:	  //No Card to Reveal
        -:  921:	  if (DEBUG){
        -:  922:	    printf("No cards to reveal\n");
        -:  923:	  }
        -:  924:	}
    #####:  925:      }
        -:  926:	    
        -:  927:      else{
    #####:  928:	if (state->deckCount[nextPlayer] == 0){
    #####:  929:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  930:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  931:	    state->deckCount[nextPlayer]++;
    #####:  932:	    state->discard[nextPlayer][i] = -1;
    #####:  933:	    state->discardCount[nextPlayer]--;
    #####:  934:	  }
        -:  935:			    
    #####:  936:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  937:	} 
    #####:  938:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
    #####:  941:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  943:	state->deckCount[nextPlayer]--;
        -:  944:      }    
        -:  945:		       
    #####:  946:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  947:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  948:	state->playedCardCount++;
    #####:  949:	tributeRevealedCards[1] = -1;
    #####:  950:      }
        -:  951:
    #####:  952:      for (i = 0; i <= 2; i ++){
    #####:  953:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  954:	  state->coins += 2;
    #####:  955:	}
        -:  956:		    
    #####:  957:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  958:	  drawCard(currentPlayer, state);
    #####:  959:	  drawCard(currentPlayer, state);
    #####:  960:	}
        -:  961:	else{//Action Card
    #####:  962:	  state->numActions = state->numActions + 2;
        -:  963:	}
    #####:  964:      }
        -:  965:	    
    #####:  966:      return 0;
        -:  967:		
        -:  968:    case ambassador:
    #####:  969:      j = 0;		//used to check if player has enough cards to discard
        -:  970:
    #####:  971:      if (choice2 > 2 || choice2 < 0)
        -:  972:	{
    #####:  973:	  return -1;				
        -:  974:	}
        -:  975:
    #####:  976:      if (choice1 == handPos)
        -:  977:	{
    #####:  978:	  return -1;
        -:  979:	}
        -:  980:
    #####:  981:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:	{
    #####:  983:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  984:	    {
    #####:  985:	      j++;
    #####:  986:	    }
    #####:  987:	}
    #####:  988:      if (j < choice2)
        -:  989:	{
    #####:  990:	  return -1;				
        -:  991:	}
        -:  992:
        -:  993:      if (DEBUG) 
        -:  994:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  995:
        -:  996:      //increase supply count for choosen card by amount being discarded
    #####:  997:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  998:			
        -:  999:      //each other player gains a copy of revealed card
    #####: 1000:      for (i = 0; i < state->numPlayers; i++)
        -: 1001:	{
    #####: 1002:	  if (i != currentPlayer)
        -: 1003:	    {
    #####: 1004:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1005:	    }
    #####: 1006:	}
        -: 1007:
        -: 1008:      //discard played card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1010:
        -: 1011:      //trash copies of cards returned to supply
    #####: 1012:      for (j = 0; j < choice2; j++)
        -: 1013:	{
    #####: 1014:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1015:	    {
    #####: 1016:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1017:		{
    #####: 1018:		  discardCard(i, currentPlayer, state, 1);
    #####: 1019:		  break;
        -: 1020:		}
    #####: 1021:	    }
    #####: 1022:	}			
        -: 1023:
    #####: 1024:      return 0;
        -: 1025:		
        -: 1026:    case cutpurse:
        -: 1027:
    #####: 1028:      updateCoins(currentPlayer, state, 2);
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
        -: 1032:	    {
    #####: 1033:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1034:		{
    #####: 1035:		  if (state->hand[i][j] == copper)
        -: 1036:		    {
    #####: 1037:		      discardCard(j, i, state, 0);
    #####: 1038:		      break;
        -: 1039:		    }
    #####: 1040:		  if (j == state->handCount[i])
        -: 1041:		    {
    #####: 1042:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1043:			{
        -: 1044:			  if (DEBUG)
        -: 1045:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1046:			}	
    #####: 1047:		      break;
        -: 1048:		    }		
    #####: 1049:		}
        -: 1050:					
    #####: 1051:	    }
        -: 1052:				
    #####: 1053:	}				
        -: 1054:
        -: 1055:      //discard played card from hand
    #####: 1056:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1057:
    #####: 1058:      return 0;
        -: 1059:
        -: 1060:		
        -: 1061:    case embargo: 
        -: 1062:      //+2 Coins
    #####: 1063:      state->coins = state->coins + 2;
        -: 1064:			
        -: 1065:      //see if selected pile is in play
    #####: 1066:      if ( state->supplyCount[choice1] == -1 )
        -: 1067:	{
    #####: 1068:	  return -1;
        -: 1069:	}
        -: 1070:			
        -: 1071:      //add embargo token to selected supply pile
    #####: 1072:      state->embargoTokens[choice1]++;
        -: 1073:			
        -: 1074:      //trash card
    #####: 1075:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case outpost:
        -: 1079:      //set outpost flag
    #####: 1080:      state->outpostPlayed++;
        -: 1081:			
        -: 1082:      //discard card
    #####: 1083:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case salvager:
        -: 1087:      //+1 buy
    #####: 1088:      state->numBuys++;
        -: 1089:			
    #####: 1090:      if (choice1)
        -: 1091:	{
        -: 1092:	  //gain coins equal to trashed card
    #####: 1093:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1094:	  //trash card
    #####: 1095:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1096:	}
        -: 1097:			
        -: 1098:      //discard card
    #####: 1099:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1100:      return 0;
        -: 1101:		
        -: 1102:    case sea_hag:
    #####: 1103:      for (i = 0; i < state->numPlayers; i++){
    #####: 1104:	if (i != currentPlayer){
    #####: 1105:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1106:	  state->discardCount[i]++;
    #####: 1107:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1108:	}
    #####: 1109:      }
    #####: 1110:      return 0;
        -: 1111:		
        -: 1112:    case treasure_map:
        -: 1113:      //search hand for another treasure_map
    #####: 1114:      index = -1;
    #####: 1115:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1116:	{
    #####: 1117:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1118:	    {
    #####: 1119:	      index = i;
    #####: 1120:	      break;
        -: 1121:	    }
    #####: 1122:	}
    #####: 1123:      if (index > -1)
        -: 1124:	{
        -: 1125:	  //trash both treasure cards
    #####: 1126:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1127:	  discardCard(index, currentPlayer, state, 1);
        -: 1128:
        -: 1129:	  //gain 4 Gold cards
    #####: 1130:	  for (i = 0; i < 4; i++)
        -: 1131:	    {
    #####: 1132:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1133:	    }
        -: 1134:				
        -: 1135:	  //return success
    #####: 1136:	  return 1;
        -: 1137:	}
        -: 1138:			
        -: 1139:      //no second treasure_map found in hand
    #####: 1140:      return -1;
        -: 1141:    }
        -: 1142:	
    #####: 1143:  return -1;
   200003: 1144:}
        -: 1145:
        -: 1146:
        -: 1147:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1148:{
        -: 1149:	
        -: 1150:  //if card is not trashed, added to Played pile 
   200003: 1151:  if (trashFlag < 1)
        -: 1152:    {
        -: 1153:      //add card to played pile
   200003: 1154:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   200003: 1155:      state->playedCardCount++;
   200003: 1156:    }
        -: 1157:	
        -: 1158:  //set played card to -1
   200003: 1159:  state->hand[currentPlayer][handPos] = -1;
        -: 1160:	
        -: 1161:  //remove card from player's hand
   200003: 1162:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1163:    {
        -: 1164:      //reduce number of cards in hand
    #####: 1165:      state->handCount[currentPlayer]--;
    #####: 1166:    }
   200003: 1167:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1168:    {
        -: 1169:      //reduce number of cards in hand
    #####: 1170:      state->handCount[currentPlayer]--;
    #####: 1171:    }
        -: 1172:  else 	
        -: 1173:    {
        -: 1174:      //replace discarded card with last card in hand
   200003: 1175:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1176:      //set last card to -1
   200003: 1177:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1178:      //reduce number of cards in hand
   200003: 1179:      state->handCount[currentPlayer]--;
        -: 1180:    }
        -: 1181:	
   200003: 1182:  return 0;
        -: 1183:}
        -: 1184:
        -: 1185:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1186:{
        -: 1187:  //Note: supplyPos is enum of choosen card
        -: 1188:	
        -: 1189:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1190:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1191:    {
    #####: 1192:      return -1;
        -: 1193:    }
        -: 1194:	
        -: 1195:  //added card for [whoseTurn] current player:
        -: 1196:  // toFlag = 0 : add to discard
        -: 1197:  // toFlag = 1 : add to deck
        -: 1198:  // toFlag = 2 : add to hand
        -: 1199:
    #####: 1200:  if (toFlag == 1)
        -: 1201:    {
    #####: 1202:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1203:      state->deckCount[player]++;
    #####: 1204:    }
    #####: 1205:  else if (toFlag == 2)
        -: 1206:    {
    #####: 1207:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1208:      state->handCount[player]++;
    #####: 1209:    }
        -: 1210:  else
        -: 1211:    {
    #####: 1212:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1213:      state->discardCount[player]++;
        -: 1214:    }
        -: 1215:	
        -: 1216:  //decrease number in supply pile
    #####: 1217:  state->supplyCount[supplyPos]--;
        -: 1218:	 
    #####: 1219:  return 0;
    #####: 1220:}
        -: 1221:
        -: 1222:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1223:{
        -: 1224:  int i;
        -: 1225:	
        -: 1226:  //reset coin count
   200007: 1227:  state->coins = 0;
        -: 1228:
        -: 1229:  //add coins for each Treasure card in player's hand
  2400068: 1230:  for (i = 0; i < state->handCount[player]; i++)
        -: 1231:    {
  1000027: 1232:      if (state->hand[player][i] == copper)
        -: 1233:	{
   600013: 1234:	  state->coins += 1;
   600013: 1235:	}
   400014: 1236:      else if (state->hand[player][i] == silver)
        -: 1237:	{
        1: 1238:	  state->coins += 2;
        1: 1239:	}
   400013: 1240:      else if (state->hand[player][i] == gold)
        -: 1241:	{
        5: 1242:	  state->coins += 3;
        5: 1243:	}	
  1000027: 1244:    }	
        -: 1245:
        -: 1246:  //add bonus
   200007: 1247:  state->coins += bonus;
        -: 1248:
   200007: 1249:  return 0;
        -: 1250:}
        -: 1251:
        -: 1252://placing refactored code in this section
        -: 1253:
        -: 1254:int adventurerR(struct gameState *state)
        -: 1255:{
        -: 1256:  //localizing variables needed for this function from the card effect function
    #####: 1257:  int currentPlayer = whoseTurn(state);
        -: 1258:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1259:  int drawntreasure=0;
        -: 1260:  int cardDrawn;
    #####: 1261:  int z = 0;// this is the counter for the temp hand
        -: 1262:
    #####: 1263:  while(drawntreasure<2){
    #####: 1264:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1265:    shuffle(currentPlayer, state);
    #####: 1266:  }
    #####: 1267:  drawCard(currentPlayer, state);
    #####: 1268:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1269:  //Bug 1:Lets introduce a bug where a copper card is not considered a treasure. This will not add to the drawnTreasure counter.
    #####: 1270:  if (/*cardDrawn == copper || */cardDrawn == silver || cardDrawn == gold)
    #####: 1271:    drawntreasure++;
        -: 1272:  else{
    #####: 1273:    temphand[z]=cardDrawn;
    #####: 1274:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1275:    z++;
        -: 1276:  }
        -: 1277:      }
    #####: 1278:      while(z-1>=0){
    #####: 1279:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1280:  z=z-1;
        -: 1281:      }
    #####: 1282:      return 0;
        -: 1283:}
        -: 1284:
        -: 1285:int smithyR(struct gameState *state, int handPos)
        -: 1286:{
        -: 1287:    int i;
   100001: 1288:    int currentPlayer = whoseTurn(state);
        -: 1289:    //Bug 2: instead of drawing 3, introducing a bug where 4 cards are drawn instead 
  1000010: 1290:    for (i = 0; i < 4; i++)
        -: 1291:  {
   400004: 1292:    drawCard(currentPlayer, state);
   400004: 1293:  }
        -: 1294:      
        -: 1295:      //discard card from hand
   100001: 1296:      discardCard(handPos, currentPlayer, state, 0);
   100001: 1297:      return 0;   
        -: 1298:}
        -: 1299:
        -: 1300:int mineR(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1301:{
        -: 1302:  int i;
        -: 1303:  int j;
        -: 1304:  int index;
    #####: 1305:  int currentPlayer = whoseTurn(state);
        -: 1306:
        -: 1307:
    #####: 1308:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1309:
    #####: 1310:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1311:  {
    #####: 1312:    return -1;
        -: 1313:  }
        -: 1314:    
    #####: 1315:      if (choice2 > treasure_map || choice2 < curse)
        -: 1316:  {
    #####: 1317:    return -1;
        -: 1318:  }
        -: 1319:
    #####: 1320:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1321:  {
    #####: 1322:    return -1;
        -: 1323:  }
        -: 1324:
    #####: 1325:      gainCard(choice2, state, 2, currentPlayer);
        -: 1326:
        -: 1327:      //discard card from hand
    #####: 1328:      discardCard(handPos, currentPlayer, state, 0);
        -: 1329:
        -: 1330:      //discard trashed card
    #####: 1331:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1332:  {
    #####: 1333:    if (state->hand[currentPlayer][i] == j)
        -: 1334:      {
    #####: 1335:        discardCard(i, currentPlayer, state, 0);      
    #####: 1336:        break;
        -: 1337:      }
    #####: 1338:  }
        -: 1339:      
    #####: 1340:      return 0;
        -: 1341:      
    #####: 1342:}
        -: 1343:
        -: 1344:int villageR(struct gameState *state, int handPos)
        -: 1345:{
   100001: 1346:  int currentPlayer = whoseTurn(state);
        -: 1347:
        -: 1348:  //+1 Draw
   100001: 1349:  drawCard(currentPlayer, state);
        -: 1350:      
        -: 1351:  //+2 Actions
   100001: 1352:  state->numActions = state->numActions + 22; //Bug 3: introducing a bug where instead of 2 more actions, player gets 22 actions
        -: 1353:      
        -: 1354:  //discard played card from hand
   100001: 1355:  discardCard(handPos, currentPlayer, state, 0);
   100001: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:int stewardR(struct gameState *state, int choice1, int choice2, int choice3, int handPos)
        -: 1360:{
    #####: 1361:  int currentPlayer = whoseTurn(state);
        -: 1362:  //Bug 4: Introducing a bug where both choice1 and choice2 are 2. This means at 1 it go to else statement.
        -: 1363:  //2 will go to the first if statement. 3 will behave normally. second if statement will never get called.
    #####: 1364:  if (choice1 == 2)//changed from 1 to 2
        -: 1365:  {
        -: 1366:    //+2 cards
    #####: 1367:    drawCard(currentPlayer, state);
    #####: 1368:    drawCard(currentPlayer, state);
    #####: 1369:  }
    #####: 1370:      else if (choice1 == 2)
        -: 1371:  {
        -: 1372:    //+2 coins
    #####: 1373:    state->coins = state->coins + 2;
    #####: 1374:  }
        -: 1375:      else
        -: 1376:  {
        -: 1377:    //trash 2 cards in hand
    #####: 1378:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1379:    discardCard(choice3, currentPlayer, state, 1);
        -: 1380:  }
        -: 1381:      
        -: 1382:      //discard card from hand
    #####: 1383:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1384:      return 0;
        -: 1385:}
        -: 1386://end of dominion.c
        -: 1387:
