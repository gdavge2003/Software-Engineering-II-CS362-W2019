unittest1.c:

** Unit Testing for updateCoins() **

** Test 1: correctly resets & no coins **
Expected coins: 0, Actual coins: 0
TEST PASSED

** Test 2: coins and bonus correctly calculated **
Expected coins: 11, Actual coins: 11
TEST PASSED

** Test 3: multiple iterations on same coin correctly calculated **
Expected coins: 9, Actual coins: 9
TEST PASSED

** Test 4: hand size should remain the same **
Expected coins: 3, Actual coins: 3
TEST PASSED
Expected hand size: 3, Actual hand size: 3
TEST PASSED
File 'unittest1.c'
Lines executed:97.67% of 43
unittest1.c:creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:2.19% of 640
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
    #####:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    #####:   65:        }
    #####:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
    #####:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    #####:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    #####:  130:	}
        -:  131:
    #####:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
    #####:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;
    #####:  150:	}
    #####:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    #####:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    #####:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
    #####:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
    #####:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
    #####:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
    #####:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
    #####:  226:  }
        -:  227:
    #####:  228:  return 0;
    #####:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
    #####:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        return adventurerEffect(state, currentPlayer, handPos);
        -:  671:
        -:  672:    case council_room:
    #####:  673:        return council_roomEffect(state, currentPlayer, handPos);
        -:  674:
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:
    #####:  726:      return 0;
        -:  727:
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:
    #####:  764:      return 0;
        -:  765:
        -:  766:    case remodel:
    #####:  767:        return remodelEffect(state, currentPlayer, handPos, choice1, choice2);
        -:  768:
        -:  769:    case smithy:
    #####:  770:        return smithyEffect(state, currentPlayer, handPos);
        -:  771:
        -:  772:    case village:
    #####:  773:        return villageEffect(state, currentPlayer, handPos);
        -:  774:
        -:  775:    case baron:
    #####:  776:      state->numBuys++;//Increase buys by 1!
    #####:  777:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  778:	int p = 0;//Iterator for hand!
    #####:  779:	int card_not_discarded = 1;//Flag for discard set!
    #####:  780:	while(card_not_discarded){
    #####:  781:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  782:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  783:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  784:	    state->discardCount[currentPlayer]++;
    #####:  785:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  786:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  787:	    }
    #####:  788:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  789:	    state->handCount[currentPlayer]--;
    #####:  790:	    card_not_discarded = 0;//Exit the loop
    #####:  791:	  }
    #####:  792:	  else if (p > state->handCount[currentPlayer]){
        -:  793:	    if(DEBUG) {
        -:  794:	      printf("No estate cards in your hand, invalid choice\n");
        -:  795:	      printf("Must gain an estate if there are any\n");
        -:  796:	    }
    #####:  797:	    if (supplyCount(estate, state) > 0){
    #####:  798:	      gainCard(estate, state, 0, currentPlayer);
    #####:  799:	      state->supplyCount[estate]--;//Decrement estates
    #####:  800:	      if (supplyCount(estate, state) == 0){
    #####:  801:		isGameOver(state);
    #####:  802:	      }
    #####:  803:	    }
    #####:  804:	    card_not_discarded = 0;//Exit the loop
    #####:  805:	  }
        -:  806:
        -:  807:	  else{
    #####:  808:	    p++;//Next card
        -:  809:	  }
        -:  810:	}
    #####:  811:      }
        -:  812:
        -:  813:      else{
    #####:  814:	if (supplyCount(estate, state) > 0){
    #####:  815:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  816:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  817:	  if (supplyCount(estate, state) == 0){
    #####:  818:	    isGameOver(state);
    #####:  819:	  }
    #####:  820:	}
        -:  821:      }
        -:  822:
        -:  823:
    #####:  824:      return 0;
        -:  825:
        -:  826:    case great_hall:
        -:  827:      //+1 Card
    #####:  828:      drawCard(currentPlayer, state);
        -:  829:
        -:  830:      //+1 Actions
    #####:  831:      state->numActions++;
        -:  832:
        -:  833:      //discard card from hand
    #####:  834:      discardCard(handPos, currentPlayer, state, 0);
    #####:  835:      return 0;
        -:  836:
        -:  837:    case minion:
        -:  838:      //+1 action
    #####:  839:      state->numActions++;
        -:  840:
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
        -:  843:
    #####:  844:      if (choice1)		//+2 coins
        -:  845:	{
    #####:  846:	  state->coins = state->coins + 2;
    #####:  847:	}
        -:  848:
    #####:  849:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  850:	{
        -:  851:	  //discard hand
    #####:  852:	  while(numHandCards(state) > 0)
        -:  853:	    {
    #####:  854:	      discardCard(handPos, currentPlayer, state, 0);
        -:  855:	    }
        -:  856:
        -:  857:	  //draw 4
    #####:  858:	  for (i = 0; i < 4; i++)
        -:  859:	    {
    #####:  860:	      drawCard(currentPlayer, state);
    #####:  861:	    }
        -:  862:
        -:  863:	  //other players discard hand and redraw if hand size > 4
    #####:  864:	  for (i = 0; i < state->numPlayers; i++)
        -:  865:	    {
    #####:  866:	      if (i != currentPlayer)
        -:  867:		{
    #####:  868:		  if ( state->handCount[i] > 4 )
        -:  869:		    {
        -:  870:		      //discard hand
    #####:  871:		      while( state->handCount[i] > 0 )
        -:  872:			{
    #####:  873:			  discardCard(handPos, i, state, 0);
        -:  874:			}
        -:  875:
        -:  876:		      //draw 4
    #####:  877:		      for (j = 0; j < 4; j++)
        -:  878:			{
    #####:  879:			  drawCard(i, state);
    #####:  880:			}
    #####:  881:		    }
    #####:  882:		}
    #####:  883:	    }
        -:  884:
    #####:  885:	}
    #####:  886:      return 0;
        -:  887:
        -:  888:    case steward:
    #####:  889:      if (choice1 == 1)
        -:  890:	{
        -:  891:	  //+2 cards
    #####:  892:	  drawCard(currentPlayer, state);
    #####:  893:	  drawCard(currentPlayer, state);
    #####:  894:	}
    #####:  895:      else if (choice1 == 2)
        -:  896:	{
        -:  897:	  //+2 coins
    #####:  898:	  state->coins = state->coins + 2;
    #####:  899:	}
        -:  900:      else
        -:  901:	{
        -:  902:	  //trash 2 cards in hand
    #####:  903:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  904:	  discardCard(choice3, currentPlayer, state, 1);
        -:  905:	}
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
    #####:  909:      return 0;
        -:  910:
        -:  911:    case tribute:
    #####:  912:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  913:	if (state->deckCount[nextPlayer] > 0){
    #####:  914:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:	  state->deckCount[nextPlayer]--;
    #####:  916:	}
    #####:  917:	else if (state->discardCount[nextPlayer] > 0){
    #####:  918:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  919:	  state->discardCount[nextPlayer]--;
    #####:  920:	}
        -:  921:	else{
        -:  922:	  //No Card to Reveal
        -:  923:	  if (DEBUG){
        -:  924:	    printf("No cards to reveal\n");
        -:  925:	  }
        -:  926:	}
    #####:  927:      }
        -:  928:
        -:  929:      else{
    #####:  930:	if (state->deckCount[nextPlayer] == 0){
    #####:  931:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  932:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  933:	    state->deckCount[nextPlayer]++;
    #####:  934:	    state->discard[nextPlayer][i] = -1;
    #####:  935:	    state->discardCount[nextPlayer]--;
    #####:  936:	  }
        -:  937:
    #####:  938:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  939:	}
    #####:  940:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
    #####:  943:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  945:	state->deckCount[nextPlayer]--;
        -:  946:      }
        -:  947:
    #####:  948:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  949:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  950:	state->playedCardCount++;
    #####:  951:	tributeRevealedCards[1] = -1;
    #####:  952:      }
        -:  953:
    #####:  954:      for (i = 0; i <= 2; i ++){
    #####:  955:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  956:	  state->coins += 2;
    #####:  957:	}
        -:  958:
    #####:  959:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  960:	  drawCard(currentPlayer, state);
    #####:  961:	  drawCard(currentPlayer, state);
    #####:  962:	}
        -:  963:	else{//Action Card
    #####:  964:	  state->numActions = state->numActions + 2;
        -:  965:	}
    #####:  966:      }
        -:  967:
    #####:  968:      return 0;
        -:  969:
        -:  970:    case ambassador:
    #####:  971:      j = 0;		//used to check if player has enough cards to discard
        -:  972:
    #####:  973:      if (choice2 > 2 || choice2 < 0)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      if (choice1 == handPos)
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  984:	{
    #####:  985:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  986:	    {
    #####:  987:	      j++;
    #####:  988:	    }
    #####:  989:	}
    #####:  990:      if (j < choice2)
        -:  991:	{
    #####:  992:	  return -1;
        -:  993:	}
        -:  994:
        -:  995:      if (DEBUG)
        -:  996:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  997:
        -:  998:      //increase supply count for choosen card by amount being discarded
    #####:  999:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1000:
        -: 1001:      //each other player gains a copy of revealed card
    #####: 1002:      for (i = 0; i < state->numPlayers; i++)
        -: 1003:	{
    #####: 1004:	  if (i != currentPlayer)
        -: 1005:	    {
    #####: 1006:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1007:	    }
    #####: 1008:	}
        -: 1009:
        -: 1010:      //discard played card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:
        -: 1013:      //trash copies of cards returned to supply
    #####: 1014:      for (j = 0; j < choice2; j++)
        -: 1015:	{
    #####: 1016:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1017:	    {
    #####: 1018:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1019:		{
    #####: 1020:		  discardCard(i, currentPlayer, state, 1);
    #####: 1021:		  break;
        -: 1022:		}
    #####: 1023:	    }
    #####: 1024:	}
        -: 1025:
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case cutpurse:
        -: 1029:
    #####: 1030:      updateCoins(currentPlayer, state, 2);
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
        -: 1034:	    {
    #####: 1035:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1036:		{
    #####: 1037:		  if (state->hand[i][j] == copper)
        -: 1038:		    {
    #####: 1039:		      discardCard(j, i, state, 0);
    #####: 1040:		      break;
        -: 1041:		    }
    #####: 1042:		  if (j == state->handCount[i])
        -: 1043:		    {
    #####: 1044:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1045:			{
        -: 1046:			  if (DEBUG)
        -: 1047:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1048:			}
    #####: 1049:		      break;
        -: 1050:		    }
    #####: 1051:		}
        -: 1052:
    #####: 1053:	    }
        -: 1054:
    #####: 1055:	}
        -: 1056:
        -: 1057:      //discard played card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
        -: 1059:
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:
        -: 1063:    case embargo:
        -: 1064:      //+2 Coins
    #####: 1065:      state->coins = state->coins + 2;
        -: 1066:
        -: 1067:      //see if selected pile is in play
    #####: 1068:      if ( state->supplyCount[choice1] == -1 )
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:
        -: 1073:      //add embargo token to selected supply pile
    #####: 1074:      state->embargoTokens[choice1]++;
        -: 1075:
        -: 1076:      //trash card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:    case outpost:
        -: 1081:      //set outpost flag
    #####: 1082:      state->outpostPlayed++;
        -: 1083:
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1086:      return 0;
        -: 1087:
        -: 1088:    case salvager:
        -: 1089:      //+1 buy
    #####: 1090:      state->numBuys++;
        -: 1091:
    #####: 1092:      if (choice1)
        -: 1093:	{
        -: 1094:	  //gain coins equal to trashed card
    #####: 1095:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1096:	  //trash card
    #####: 1097:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1098:	}
        -: 1099:
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:
        -: 1104:    case sea_hag:
    #####: 1105:      for (i = 0; i < state->numPlayers; i++){
    #####: 1106:	if (i != currentPlayer){
    #####: 1107:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1108:	  state->discardCount[i]++;
    #####: 1109:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1110:	}
    #####: 1111:      }
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case treasure_map:
        -: 1115:      //search hand for another treasure_map
    #####: 1116:      index = -1;
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1118:	{
    #####: 1119:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1120:	    {
    #####: 1121:	      index = i;
    #####: 1122:	      break;
        -: 1123:	    }
    #####: 1124:	}
    #####: 1125:      if (index > -1)
        -: 1126:	{
        -: 1127:	  //trash both treasure cards
    #####: 1128:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1129:	  discardCard(index, currentPlayer, state, 1);
        -: 1130:
        -: 1131:	  //gain 4 Gold cards
    #####: 1132:	  for (i = 0; i < 4; i++)
        -: 1133:	    {
    #####: 1134:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1135:	    }
        -: 1136:
        -: 1137:	  //return success
    #####: 1138:	  return 1;
        -: 1139:	}
        -: 1140:
        -: 1141:      //no second treasure_map found in hand
    #####: 1142:      return -1;
        -: 1143:    }
        -: 1144:
    #####: 1145:  return -1;
    #####: 1146:}
        -: 1147:
        -: 1148:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1149:{
        -: 1150:
        -: 1151:  //if card is not trashed, added to Played pile
    #####: 1152:  if (trashFlag < 1)
        -: 1153:    {
        -: 1154:      //add card to played pile
    #####: 1155:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1156:      state->playedCardCount++;
    #####: 1157:    }
        -: 1158:
        -: 1159:  //set played card to -1
    #####: 1160:  state->hand[currentPlayer][handPos] = -1;
        -: 1161:
        -: 1162:  //remove card from player's hand
    #####: 1163:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1164:    {
        -: 1165:      //reduce number of cards in hand
    #####: 1166:      state->handCount[currentPlayer]--;
    #####: 1167:    }
    #####: 1168:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1169:    {
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
    #####: 1172:    }
        -: 1173:  else
        -: 1174:    {
        -: 1175:      //replace discarded card with last card in hand
    #####: 1176:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1177:      //set last card to -1
    #####: 1178:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1179:      //reduce number of cards in hand
    #####: 1180:      state->handCount[currentPlayer]--;
        -: 1181:    }
        -: 1182:
    #####: 1183:  return 0;
        -: 1184:}
        -: 1185:
        -: 1186:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1187:{
        -: 1188:  //Note: supplyPos is enum of choosen card
        -: 1189:
        -: 1190:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1191:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1192:    {
    #####: 1193:      return -1;
        -: 1194:    }
        -: 1195:
        -: 1196:  //added card for [whoseTurn] current player:
        -: 1197:  // toFlag = 0 : add to discard
        -: 1198:  // toFlag = 1 : add to deck
        -: 1199:  // toFlag = 2 : add to hand
        -: 1200:
    #####: 1201:  if (toFlag == 1)
        -: 1202:    {
    #####: 1203:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1204:      state->deckCount[player]++;
    #####: 1205:    }
    #####: 1206:  else if (toFlag == 2)
        -: 1207:    {
    #####: 1208:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1209:      state->handCount[player]++;
    #####: 1210:    }
        -: 1211:  else
        -: 1212:    {
    #####: 1213:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1214:      state->discardCount[player]++;
        -: 1215:    }
        -: 1216:
        -: 1217:  //decrease number in supply pile
    #####: 1218:  state->supplyCount[supplyPos]--;
        -: 1219:
    #####: 1220:  return 0;
    #####: 1221:}
        -: 1222:
        -: 1223:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1224:{
        -: 1225:  int i;
        -: 1226:
        -: 1227:  //reset coin count
        4: 1228:  state->coins = 0;
        -: 1229:
        -: 1230:  //add coins for each Treasure card in player's hand
       32: 1231:  for (i = 0; i < state->handCount[player]; i++)
        -: 1232:    {
       12: 1233:      if (state->hand[player][i] == copper)
        -: 1234:	{
        1: 1235:	  state->coins += 1;
        1: 1236:	}
       11: 1237:      else if (state->hand[player][i] == silver)
        -: 1238:	{
        1: 1239:	  state->coins += 2;
        1: 1240:	}
       10: 1241:      else if (state->hand[player][i] == gold)
        -: 1242:	{
        5: 1243:	  state->coins += 3;
        5: 1244:	}
       12: 1245:    }
        -: 1246:
        -: 1247:  //add bonus
        4: 1248:  state->coins += bonus;
        -: 1249:
        4: 1250:  return 0;
        -: 1251:}
        -: 1252:
        -: 1253:// card effects
        -: 1254:// adventurer card effect
        -: 1255:int adventurerEffect(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1256:    int drawntreasure = 0;
        -: 1257:    int cardDrawn;
        -: 1258:    int temphand[MAX_HAND];
    #####: 1259:    int temphandCounter = 0;
        -: 1260:
        -: 1261:    // keep drawing cards til get 2 treasure
        -: 1262:    // treasures are recorded in hand, while nontreasure are counted in temphand and not recorded in hand
    #####: 1263:    while (drawntreasure < 2) {
    #####: 1264:        drawCard(currentPlayer, state);
        -: 1265:
    #####: 1266:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1]; // top of hand is most recent draw
    #####: 1267:        if (cardDrawn == copper || cardDrawn == silver) {
    #####: 1268:            drawntreasure++;
    #####: 1269:        }
        -: 1270:        else {
    #####: 1271:            temphand[temphandCounter] = cardDrawn;
    #####: 1272:            state->handCount[currentPlayer]--; // not treasure; don't count as adding tot hand
    #####: 1273:            temphandCounter++;
        -: 1274:        }
        -: 1275:    }
        -: 1276:
        -: 1277:    // discard all cards that were recorded in temphand
    #####: 1278:    while (temphandCounter-1 >= 0) {
    #####: 1279:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter-1];
    #####: 1280:        temphandCounter--;
        -: 1281:    }
        -: 1282:
        -: 1283:    // discard this played card
    #####: 1284:    discardCard(handPos, currentPlayer, state, 0);
        -: 1285:
    #####: 1286:    return 0;
        -: 1287:}
        -: 1288:
        -: 1289:// smithy card effect
        -: 1290:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1291:    int i;
        -: 1292:
        -: 1293:    // draw 3 cards
    #####: 1294:    for (i = 0; i < 4; i++) {
    #####: 1295:        drawCard(currentPlayer, state);
    #####: 1296:    }
        -: 1297:
        -: 1298:    // discard this played card
    #####: 1299:    discardCard(handPos, currentPlayer, state, 0);
        -: 1300:
    #####: 1301:    return 0;
        -: 1302:}
        -: 1303:
        -: 1304:// village card effect
        -: 1305:int villageEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1306:    // +1 card, +2 actions
    #####: 1307:    drawCard(currentPlayer, state);
    #####: 1308:    state->numActions = state->numBuys+2;
        -: 1309:
        -: 1310:    // discard this played card
    #####: 1311:    discardCard(handPos+1, currentPlayer, state, 0);
        -: 1312:
    #####: 1313:    return 0;
        -: 1314:}
        -: 1315:
        -: 1316:// council room effect
        -: 1317:int council_roomEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1318:    int i;
        -: 1319:    // +4 cards, +1 buy
    #####: 1320:    for (i = 0; i < 4; i++) {
    #####: 1321:        drawCard(currentPlayer, state);
    #####: 1322:    }
        -: 1323:
    #####: 1324:    state->numBuys++;
        -: 1325:
        -: 1326:    // +1 card for other players
    #####: 1327:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1328:        if (i != currentPlayer)
    #####: 1329:            drawCard(i, state);
    #####: 1330:    }
        -: 1331:
        -: 1332:    // discard this played card
    #####: 1333:    discardCard(handPos, currentPlayer, state, 0);
        -: 1334:
    #####: 1335:    return 0;
        -: 1336:}
        -: 1337:
        -: 1338:// remodel card effect
        -: 1339:int remodelEffect(struct gameState *state, int currentPlayer, int handPos, int trashChoice, int gainChoice) {
        -: 1340:    int i;
    #####: 1341:    int trashingCard = state->hand[currentPlayer][trashChoice];
        -: 1342:
        -: 1343:    // if trying to gain a card that costs more than +2 of trashed card, refuse action
    #####: 1344:    if (getCost(gainChoice)+2 > getCost(trashChoice))
    #####: 1345:        return -1;
        -: 1346:
        -: 1347:    // gain chosen card
    #####: 1348:    gainCard(gainChoice, state, 0, currentPlayer);
        -: 1349:
        -: 1350:    // discard card from hand
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:    return 0;
    #####: 1354:}
        -: 1355://end of dominion.c
        -: 1356:
unittest2.c:

** Unit Testing for isGameOver() **

** Test 1: game ends w/ no Provinces **
Expected game result: 1, Actual game result: 1
TEST PASSED

** Test 2: game continues with 1 Province remaining **
Expected game result: 0, Actual game result: 0
TEST PASSED

** Test 3: game ends w/ 3 empty supply piles **
Expected game result: 1, Actual game result: 1
TEST PASSED

** Test 4: game continues with 2 supply piles empty **
Expected game result: 0, Actual game result: 0
TEST PASSED

** Test 5: game continues with 0 supply piles empty **
Expected game result: 0, Actual game result: 0
TEST PASSED
File 'unittest2.c'
Lines executed:98.00% of 50
unittest2.c:creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:4.06% of 640
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
    #####:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    #####:   65:        }
    #####:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
    #####:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    #####:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    #####:  130:	}
        -:  131:
    #####:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
    #####:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;
    #####:  150:	}
    #####:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    #####:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    #####:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
    #####:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
    #####:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
    #####:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
    #####:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
    #####:  226:  }
        -:  227:
    #####:  228:  return 0;
    #####:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        5:  406:	  j++;
        5:  407:	}
      100:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        5:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
    #####:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        return adventurerEffect(state, currentPlayer, handPos);
        -:  671:
        -:  672:    case council_room:
    #####:  673:        return council_roomEffect(state, currentPlayer, handPos);
        -:  674:
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:
    #####:  726:      return 0;
        -:  727:
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:
    #####:  764:      return 0;
        -:  765:
        -:  766:    case remodel:
    #####:  767:        return remodelEffect(state, currentPlayer, handPos, choice1, choice2);
        -:  768:
        -:  769:    case smithy:
    #####:  770:        return smithyEffect(state, currentPlayer, handPos);
        -:  771:
        -:  772:    case village:
    #####:  773:        return villageEffect(state, currentPlayer, handPos);
        -:  774:
        -:  775:    case baron:
    #####:  776:      state->numBuys++;//Increase buys by 1!
    #####:  777:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  778:	int p = 0;//Iterator for hand!
    #####:  779:	int card_not_discarded = 1;//Flag for discard set!
    #####:  780:	while(card_not_discarded){
    #####:  781:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  782:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  783:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  784:	    state->discardCount[currentPlayer]++;
    #####:  785:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  786:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  787:	    }
    #####:  788:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  789:	    state->handCount[currentPlayer]--;
    #####:  790:	    card_not_discarded = 0;//Exit the loop
    #####:  791:	  }
    #####:  792:	  else if (p > state->handCount[currentPlayer]){
        -:  793:	    if(DEBUG) {
        -:  794:	      printf("No estate cards in your hand, invalid choice\n");
        -:  795:	      printf("Must gain an estate if there are any\n");
        -:  796:	    }
    #####:  797:	    if (supplyCount(estate, state) > 0){
    #####:  798:	      gainCard(estate, state, 0, currentPlayer);
    #####:  799:	      state->supplyCount[estate]--;//Decrement estates
    #####:  800:	      if (supplyCount(estate, state) == 0){
    #####:  801:		isGameOver(state);
    #####:  802:	      }
    #####:  803:	    }
    #####:  804:	    card_not_discarded = 0;//Exit the loop
    #####:  805:	  }
        -:  806:
        -:  807:	  else{
    #####:  808:	    p++;//Next card
        -:  809:	  }
        -:  810:	}
    #####:  811:      }
        -:  812:
        -:  813:      else{
    #####:  814:	if (supplyCount(estate, state) > 0){
    #####:  815:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  816:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  817:	  if (supplyCount(estate, state) == 0){
    #####:  818:	    isGameOver(state);
    #####:  819:	  }
    #####:  820:	}
        -:  821:      }
        -:  822:
        -:  823:
    #####:  824:      return 0;
        -:  825:
        -:  826:    case great_hall:
        -:  827:      //+1 Card
    #####:  828:      drawCard(currentPlayer, state);
        -:  829:
        -:  830:      //+1 Actions
    #####:  831:      state->numActions++;
        -:  832:
        -:  833:      //discard card from hand
    #####:  834:      discardCard(handPos, currentPlayer, state, 0);
    #####:  835:      return 0;
        -:  836:
        -:  837:    case minion:
        -:  838:      //+1 action
    #####:  839:      state->numActions++;
        -:  840:
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
        -:  843:
    #####:  844:      if (choice1)		//+2 coins
        -:  845:	{
    #####:  846:	  state->coins = state->coins + 2;
    #####:  847:	}
        -:  848:
    #####:  849:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  850:	{
        -:  851:	  //discard hand
    #####:  852:	  while(numHandCards(state) > 0)
        -:  853:	    {
    #####:  854:	      discardCard(handPos, currentPlayer, state, 0);
        -:  855:	    }
        -:  856:
        -:  857:	  //draw 4
    #####:  858:	  for (i = 0; i < 4; i++)
        -:  859:	    {
    #####:  860:	      drawCard(currentPlayer, state);
    #####:  861:	    }
        -:  862:
        -:  863:	  //other players discard hand and redraw if hand size > 4
    #####:  864:	  for (i = 0; i < state->numPlayers; i++)
        -:  865:	    {
    #####:  866:	      if (i != currentPlayer)
        -:  867:		{
    #####:  868:		  if ( state->handCount[i] > 4 )
        -:  869:		    {
        -:  870:		      //discard hand
    #####:  871:		      while( state->handCount[i] > 0 )
        -:  872:			{
    #####:  873:			  discardCard(handPos, i, state, 0);
        -:  874:			}
        -:  875:
        -:  876:		      //draw 4
    #####:  877:		      for (j = 0; j < 4; j++)
        -:  878:			{
    #####:  879:			  drawCard(i, state);
    #####:  880:			}
    #####:  881:		    }
    #####:  882:		}
    #####:  883:	    }
        -:  884:
    #####:  885:	}
    #####:  886:      return 0;
        -:  887:
        -:  888:    case steward:
    #####:  889:      if (choice1 == 1)
        -:  890:	{
        -:  891:	  //+2 cards
    #####:  892:	  drawCard(currentPlayer, state);
    #####:  893:	  drawCard(currentPlayer, state);
    #####:  894:	}
    #####:  895:      else if (choice1 == 2)
        -:  896:	{
        -:  897:	  //+2 coins
    #####:  898:	  state->coins = state->coins + 2;
    #####:  899:	}
        -:  900:      else
        -:  901:	{
        -:  902:	  //trash 2 cards in hand
    #####:  903:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  904:	  discardCard(choice3, currentPlayer, state, 1);
        -:  905:	}
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
    #####:  909:      return 0;
        -:  910:
        -:  911:    case tribute:
    #####:  912:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  913:	if (state->deckCount[nextPlayer] > 0){
    #####:  914:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:	  state->deckCount[nextPlayer]--;
    #####:  916:	}
    #####:  917:	else if (state->discardCount[nextPlayer] > 0){
    #####:  918:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  919:	  state->discardCount[nextPlayer]--;
    #####:  920:	}
        -:  921:	else{
        -:  922:	  //No Card to Reveal
        -:  923:	  if (DEBUG){
        -:  924:	    printf("No cards to reveal\n");
        -:  925:	  }
        -:  926:	}
    #####:  927:      }
        -:  928:
        -:  929:      else{
    #####:  930:	if (state->deckCount[nextPlayer] == 0){
    #####:  931:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  932:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  933:	    state->deckCount[nextPlayer]++;
    #####:  934:	    state->discard[nextPlayer][i] = -1;
    #####:  935:	    state->discardCount[nextPlayer]--;
    #####:  936:	  }
        -:  937:
    #####:  938:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  939:	}
    #####:  940:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
    #####:  943:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  945:	state->deckCount[nextPlayer]--;
        -:  946:      }
        -:  947:
    #####:  948:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  949:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  950:	state->playedCardCount++;
    #####:  951:	tributeRevealedCards[1] = -1;
    #####:  952:      }
        -:  953:
    #####:  954:      for (i = 0; i <= 2; i ++){
    #####:  955:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  956:	  state->coins += 2;
    #####:  957:	}
        -:  958:
    #####:  959:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  960:	  drawCard(currentPlayer, state);
    #####:  961:	  drawCard(currentPlayer, state);
    #####:  962:	}
        -:  963:	else{//Action Card
    #####:  964:	  state->numActions = state->numActions + 2;
        -:  965:	}
    #####:  966:      }
        -:  967:
    #####:  968:      return 0;
        -:  969:
        -:  970:    case ambassador:
    #####:  971:      j = 0;		//used to check if player has enough cards to discard
        -:  972:
    #####:  973:      if (choice2 > 2 || choice2 < 0)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      if (choice1 == handPos)
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  984:	{
    #####:  985:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  986:	    {
    #####:  987:	      j++;
    #####:  988:	    }
    #####:  989:	}
    #####:  990:      if (j < choice2)
        -:  991:	{
    #####:  992:	  return -1;
        -:  993:	}
        -:  994:
        -:  995:      if (DEBUG)
        -:  996:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  997:
        -:  998:      //increase supply count for choosen card by amount being discarded
    #####:  999:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1000:
        -: 1001:      //each other player gains a copy of revealed card
    #####: 1002:      for (i = 0; i < state->numPlayers; i++)
        -: 1003:	{
    #####: 1004:	  if (i != currentPlayer)
        -: 1005:	    {
    #####: 1006:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1007:	    }
    #####: 1008:	}
        -: 1009:
        -: 1010:      //discard played card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:
        -: 1013:      //trash copies of cards returned to supply
    #####: 1014:      for (j = 0; j < choice2; j++)
        -: 1015:	{
    #####: 1016:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1017:	    {
    #####: 1018:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1019:		{
    #####: 1020:		  discardCard(i, currentPlayer, state, 1);
    #####: 1021:		  break;
        -: 1022:		}
    #####: 1023:	    }
    #####: 1024:	}
        -: 1025:
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case cutpurse:
        -: 1029:
    #####: 1030:      updateCoins(currentPlayer, state, 2);
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
        -: 1034:	    {
    #####: 1035:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1036:		{
    #####: 1037:		  if (state->hand[i][j] == copper)
        -: 1038:		    {
    #####: 1039:		      discardCard(j, i, state, 0);
    #####: 1040:		      break;
        -: 1041:		    }
    #####: 1042:		  if (j == state->handCount[i])
        -: 1043:		    {
    #####: 1044:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1045:			{
        -: 1046:			  if (DEBUG)
        -: 1047:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1048:			}
    #####: 1049:		      break;
        -: 1050:		    }
    #####: 1051:		}
        -: 1052:
    #####: 1053:	    }
        -: 1054:
    #####: 1055:	}
        -: 1056:
        -: 1057:      //discard played card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
        -: 1059:
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:
        -: 1063:    case embargo:
        -: 1064:      //+2 Coins
    #####: 1065:      state->coins = state->coins + 2;
        -: 1066:
        -: 1067:      //see if selected pile is in play
    #####: 1068:      if ( state->supplyCount[choice1] == -1 )
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:
        -: 1073:      //add embargo token to selected supply pile
    #####: 1074:      state->embargoTokens[choice1]++;
        -: 1075:
        -: 1076:      //trash card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:    case outpost:
        -: 1081:      //set outpost flag
    #####: 1082:      state->outpostPlayed++;
        -: 1083:
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1086:      return 0;
        -: 1087:
        -: 1088:    case salvager:
        -: 1089:      //+1 buy
    #####: 1090:      state->numBuys++;
        -: 1091:
    #####: 1092:      if (choice1)
        -: 1093:	{
        -: 1094:	  //gain coins equal to trashed card
    #####: 1095:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1096:	  //trash card
    #####: 1097:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1098:	}
        -: 1099:
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:
        -: 1104:    case sea_hag:
    #####: 1105:      for (i = 0; i < state->numPlayers; i++){
    #####: 1106:	if (i != currentPlayer){
    #####: 1107:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1108:	  state->discardCount[i]++;
    #####: 1109:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1110:	}
    #####: 1111:      }
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case treasure_map:
        -: 1115:      //search hand for another treasure_map
    #####: 1116:      index = -1;
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1118:	{
    #####: 1119:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1120:	    {
    #####: 1121:	      index = i;
    #####: 1122:	      break;
        -: 1123:	    }
    #####: 1124:	}
    #####: 1125:      if (index > -1)
        -: 1126:	{
        -: 1127:	  //trash both treasure cards
    #####: 1128:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1129:	  discardCard(index, currentPlayer, state, 1);
        -: 1130:
        -: 1131:	  //gain 4 Gold cards
    #####: 1132:	  for (i = 0; i < 4; i++)
        -: 1133:	    {
    #####: 1134:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1135:	    }
        -: 1136:
        -: 1137:	  //return success
    #####: 1138:	  return 1;
        -: 1139:	}
        -: 1140:
        -: 1141:      //no second treasure_map found in hand
    #####: 1142:      return -1;
        -: 1143:    }
        -: 1144:
    #####: 1145:  return -1;
    #####: 1146:}
        -: 1147:
        -: 1148:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1149:{
        -: 1150:
        -: 1151:  //if card is not trashed, added to Played pile
    #####: 1152:  if (trashFlag < 1)
        -: 1153:    {
        -: 1154:      //add card to played pile
    #####: 1155:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1156:      state->playedCardCount++;
    #####: 1157:    }
        -: 1158:
        -: 1159:  //set played card to -1
    #####: 1160:  state->hand[currentPlayer][handPos] = -1;
        -: 1161:
        -: 1162:  //remove card from player's hand
    #####: 1163:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1164:    {
        -: 1165:      //reduce number of cards in hand
    #####: 1166:      state->handCount[currentPlayer]--;
    #####: 1167:    }
    #####: 1168:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1169:    {
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
    #####: 1172:    }
        -: 1173:  else
        -: 1174:    {
        -: 1175:      //replace discarded card with last card in hand
    #####: 1176:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1177:      //set last card to -1
    #####: 1178:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1179:      //reduce number of cards in hand
    #####: 1180:      state->handCount[currentPlayer]--;
        -: 1181:    }
        -: 1182:
    #####: 1183:  return 0;
        -: 1184:}
        -: 1185:
        -: 1186:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1187:{
        -: 1188:  //Note: supplyPos is enum of choosen card
        -: 1189:
        -: 1190:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1191:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1192:    {
    #####: 1193:      return -1;
        -: 1194:    }
        -: 1195:
        -: 1196:  //added card for [whoseTurn] current player:
        -: 1197:  // toFlag = 0 : add to discard
        -: 1198:  // toFlag = 1 : add to deck
        -: 1199:  // toFlag = 2 : add to hand
        -: 1200:
    #####: 1201:  if (toFlag == 1)
        -: 1202:    {
    #####: 1203:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1204:      state->deckCount[player]++;
    #####: 1205:    }
    #####: 1206:  else if (toFlag == 2)
        -: 1207:    {
    #####: 1208:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1209:      state->handCount[player]++;
    #####: 1210:    }
        -: 1211:  else
        -: 1212:    {
    #####: 1213:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1214:      state->discardCount[player]++;
        -: 1215:    }
        -: 1216:
        -: 1217:  //decrease number in supply pile
    #####: 1218:  state->supplyCount[supplyPos]--;
        -: 1219:
    #####: 1220:  return 0;
    #####: 1221:}
        -: 1222:
        -: 1223:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1224:{
        -: 1225:  int i;
        -: 1226:
        -: 1227:  //reset coin count
        4: 1228:  state->coins = 0;
        -: 1229:
        -: 1230:  //add coins for each Treasure card in player's hand
       32: 1231:  for (i = 0; i < state->handCount[player]; i++)
        -: 1232:    {
       12: 1233:      if (state->hand[player][i] == copper)
        -: 1234:	{
        1: 1235:	  state->coins += 1;
        1: 1236:	}
       11: 1237:      else if (state->hand[player][i] == silver)
        -: 1238:	{
        1: 1239:	  state->coins += 2;
        1: 1240:	}
       10: 1241:      else if (state->hand[player][i] == gold)
        -: 1242:	{
        5: 1243:	  state->coins += 3;
        5: 1244:	}
       12: 1245:    }
        -: 1246:
        -: 1247:  //add bonus
        4: 1248:  state->coins += bonus;
        -: 1249:
        4: 1250:  return 0;
        -: 1251:}
        -: 1252:
        -: 1253:// card effects
        -: 1254:// adventurer card effect
        -: 1255:int adventurerEffect(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1256:    int drawntreasure = 0;
        -: 1257:    int cardDrawn;
        -: 1258:    int temphand[MAX_HAND];
    #####: 1259:    int temphandCounter = 0;
        -: 1260:
        -: 1261:    // keep drawing cards til get 2 treasure
        -: 1262:    // treasures are recorded in hand, while nontreasure are counted in temphand and not recorded in hand
    #####: 1263:    while (drawntreasure < 2) {
    #####: 1264:        drawCard(currentPlayer, state);
        -: 1265:
    #####: 1266:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1]; // top of hand is most recent draw
    #####: 1267:        if (cardDrawn == copper || cardDrawn == silver) {
    #####: 1268:            drawntreasure++;
    #####: 1269:        }
        -: 1270:        else {
    #####: 1271:            temphand[temphandCounter] = cardDrawn;
    #####: 1272:            state->handCount[currentPlayer]--; // not treasure; don't count as adding tot hand
    #####: 1273:            temphandCounter++;
        -: 1274:        }
        -: 1275:    }
        -: 1276:
        -: 1277:    // discard all cards that were recorded in temphand
    #####: 1278:    while (temphandCounter-1 >= 0) {
    #####: 1279:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter-1];
    #####: 1280:        temphandCounter--;
        -: 1281:    }
        -: 1282:
        -: 1283:    // discard this played card
    #####: 1284:    discardCard(handPos, currentPlayer, state, 0);
        -: 1285:
    #####: 1286:    return 0;
        -: 1287:}
        -: 1288:
        -: 1289:// smithy card effect
        -: 1290:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1291:    int i;
        -: 1292:
        -: 1293:    // draw 3 cards
    #####: 1294:    for (i = 0; i < 4; i++) {
    #####: 1295:        drawCard(currentPlayer, state);
    #####: 1296:    }
        -: 1297:
        -: 1298:    // discard this played card
    #####: 1299:    discardCard(handPos, currentPlayer, state, 0);
        -: 1300:
    #####: 1301:    return 0;
        -: 1302:}
        -: 1303:
        -: 1304:// village card effect
        -: 1305:int villageEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1306:    // +1 card, +2 actions
    #####: 1307:    drawCard(currentPlayer, state);
    #####: 1308:    state->numActions = state->numBuys+2;
        -: 1309:
        -: 1310:    // discard this played card
    #####: 1311:    discardCard(handPos+1, currentPlayer, state, 0);
        -: 1312:
    #####: 1313:    return 0;
        -: 1314:}
        -: 1315:
        -: 1316:// council room effect
        -: 1317:int council_roomEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1318:    int i;
        -: 1319:    // +4 cards, +1 buy
    #####: 1320:    for (i = 0; i < 4; i++) {
    #####: 1321:        drawCard(currentPlayer, state);
    #####: 1322:    }
        -: 1323:
    #####: 1324:    state->numBuys++;
        -: 1325:
        -: 1326:    // +1 card for other players
    #####: 1327:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1328:        if (i != currentPlayer)
    #####: 1329:            drawCard(i, state);
    #####: 1330:    }
        -: 1331:
        -: 1332:    // discard this played card
    #####: 1333:    discardCard(handPos, currentPlayer, state, 0);
        -: 1334:
    #####: 1335:    return 0;
        -: 1336:}
        -: 1337:
        -: 1338:// remodel card effect
        -: 1339:int remodelEffect(struct gameState *state, int currentPlayer, int handPos, int trashChoice, int gainChoice) {
        -: 1340:    int i;
    #####: 1341:    int trashingCard = state->hand[currentPlayer][trashChoice];
        -: 1342:
        -: 1343:    // if trying to gain a card that costs more than +2 of trashed card, refuse action
    #####: 1344:    if (getCost(gainChoice)+2 > getCost(trashChoice))
    #####: 1345:        return -1;
        -: 1346:
        -: 1347:    // gain chosen card
    #####: 1348:    gainCard(gainChoice, state, 0, currentPlayer);
        -: 1349:
        -: 1350:    // discard card from hand
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:    return 0;
    #####: 1354:}
        -: 1355://end of dominion.c
        -: 1356:
unittest3.c:

** Unit Testing for whoseTurn() **

** Test 1: returns correct value in state **
Expected whoseTurn: 0, Actual whoseTurn result: 0
TEST PASSED
File 'unittest3.c'
Lines executed:92.31% of 13
unittest3.c:creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:4.22% of 640
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
    #####:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    #####:   65:        }
    #####:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
    #####:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    #####:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    #####:  130:	}
        -:  131:
    #####:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
    #####:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;
    #####:  150:	}
    #####:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    #####:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    #####:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
    #####:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
    #####:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
    #####:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
    #####:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
    #####:  226:  }
        -:  227:
    #####:  228:  return 0;
    #####:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        5:  406:	  j++;
        5:  407:	}
      100:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        5:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
    #####:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        return adventurerEffect(state, currentPlayer, handPos);
        -:  671:
        -:  672:    case council_room:
    #####:  673:        return council_roomEffect(state, currentPlayer, handPos);
        -:  674:
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:
    #####:  726:      return 0;
        -:  727:
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:
    #####:  764:      return 0;
        -:  765:
        -:  766:    case remodel:
    #####:  767:        return remodelEffect(state, currentPlayer, handPos, choice1, choice2);
        -:  768:
        -:  769:    case smithy:
    #####:  770:        return smithyEffect(state, currentPlayer, handPos);
        -:  771:
        -:  772:    case village:
    #####:  773:        return villageEffect(state, currentPlayer, handPos);
        -:  774:
        -:  775:    case baron:
    #####:  776:      state->numBuys++;//Increase buys by 1!
    #####:  777:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  778:	int p = 0;//Iterator for hand!
    #####:  779:	int card_not_discarded = 1;//Flag for discard set!
    #####:  780:	while(card_not_discarded){
    #####:  781:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  782:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  783:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  784:	    state->discardCount[currentPlayer]++;
    #####:  785:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  786:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  787:	    }
    #####:  788:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  789:	    state->handCount[currentPlayer]--;
    #####:  790:	    card_not_discarded = 0;//Exit the loop
    #####:  791:	  }
    #####:  792:	  else if (p > state->handCount[currentPlayer]){
        -:  793:	    if(DEBUG) {
        -:  794:	      printf("No estate cards in your hand, invalid choice\n");
        -:  795:	      printf("Must gain an estate if there are any\n");
        -:  796:	    }
    #####:  797:	    if (supplyCount(estate, state) > 0){
    #####:  798:	      gainCard(estate, state, 0, currentPlayer);
    #####:  799:	      state->supplyCount[estate]--;//Decrement estates
    #####:  800:	      if (supplyCount(estate, state) == 0){
    #####:  801:		isGameOver(state);
    #####:  802:	      }
    #####:  803:	    }
    #####:  804:	    card_not_discarded = 0;//Exit the loop
    #####:  805:	  }
        -:  806:
        -:  807:	  else{
    #####:  808:	    p++;//Next card
        -:  809:	  }
        -:  810:	}
    #####:  811:      }
        -:  812:
        -:  813:      else{
    #####:  814:	if (supplyCount(estate, state) > 0){
    #####:  815:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  816:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  817:	  if (supplyCount(estate, state) == 0){
    #####:  818:	    isGameOver(state);
    #####:  819:	  }
    #####:  820:	}
        -:  821:      }
        -:  822:
        -:  823:
    #####:  824:      return 0;
        -:  825:
        -:  826:    case great_hall:
        -:  827:      //+1 Card
    #####:  828:      drawCard(currentPlayer, state);
        -:  829:
        -:  830:      //+1 Actions
    #####:  831:      state->numActions++;
        -:  832:
        -:  833:      //discard card from hand
    #####:  834:      discardCard(handPos, currentPlayer, state, 0);
    #####:  835:      return 0;
        -:  836:
        -:  837:    case minion:
        -:  838:      //+1 action
    #####:  839:      state->numActions++;
        -:  840:
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
        -:  843:
    #####:  844:      if (choice1)		//+2 coins
        -:  845:	{
    #####:  846:	  state->coins = state->coins + 2;
    #####:  847:	}
        -:  848:
    #####:  849:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  850:	{
        -:  851:	  //discard hand
    #####:  852:	  while(numHandCards(state) > 0)
        -:  853:	    {
    #####:  854:	      discardCard(handPos, currentPlayer, state, 0);
        -:  855:	    }
        -:  856:
        -:  857:	  //draw 4
    #####:  858:	  for (i = 0; i < 4; i++)
        -:  859:	    {
    #####:  860:	      drawCard(currentPlayer, state);
    #####:  861:	    }
        -:  862:
        -:  863:	  //other players discard hand and redraw if hand size > 4
    #####:  864:	  for (i = 0; i < state->numPlayers; i++)
        -:  865:	    {
    #####:  866:	      if (i != currentPlayer)
        -:  867:		{
    #####:  868:		  if ( state->handCount[i] > 4 )
        -:  869:		    {
        -:  870:		      //discard hand
    #####:  871:		      while( state->handCount[i] > 0 )
        -:  872:			{
    #####:  873:			  discardCard(handPos, i, state, 0);
        -:  874:			}
        -:  875:
        -:  876:		      //draw 4
    #####:  877:		      for (j = 0; j < 4; j++)
        -:  878:			{
    #####:  879:			  drawCard(i, state);
    #####:  880:			}
    #####:  881:		    }
    #####:  882:		}
    #####:  883:	    }
        -:  884:
    #####:  885:	}
    #####:  886:      return 0;
        -:  887:
        -:  888:    case steward:
    #####:  889:      if (choice1 == 1)
        -:  890:	{
        -:  891:	  //+2 cards
    #####:  892:	  drawCard(currentPlayer, state);
    #####:  893:	  drawCard(currentPlayer, state);
    #####:  894:	}
    #####:  895:      else if (choice1 == 2)
        -:  896:	{
        -:  897:	  //+2 coins
    #####:  898:	  state->coins = state->coins + 2;
    #####:  899:	}
        -:  900:      else
        -:  901:	{
        -:  902:	  //trash 2 cards in hand
    #####:  903:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  904:	  discardCard(choice3, currentPlayer, state, 1);
        -:  905:	}
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
    #####:  909:      return 0;
        -:  910:
        -:  911:    case tribute:
    #####:  912:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  913:	if (state->deckCount[nextPlayer] > 0){
    #####:  914:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:	  state->deckCount[nextPlayer]--;
    #####:  916:	}
    #####:  917:	else if (state->discardCount[nextPlayer] > 0){
    #####:  918:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  919:	  state->discardCount[nextPlayer]--;
    #####:  920:	}
        -:  921:	else{
        -:  922:	  //No Card to Reveal
        -:  923:	  if (DEBUG){
        -:  924:	    printf("No cards to reveal\n");
        -:  925:	  }
        -:  926:	}
    #####:  927:      }
        -:  928:
        -:  929:      else{
    #####:  930:	if (state->deckCount[nextPlayer] == 0){
    #####:  931:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  932:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  933:	    state->deckCount[nextPlayer]++;
    #####:  934:	    state->discard[nextPlayer][i] = -1;
    #####:  935:	    state->discardCount[nextPlayer]--;
    #####:  936:	  }
        -:  937:
    #####:  938:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  939:	}
    #####:  940:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
    #####:  943:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  945:	state->deckCount[nextPlayer]--;
        -:  946:      }
        -:  947:
    #####:  948:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  949:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  950:	state->playedCardCount++;
    #####:  951:	tributeRevealedCards[1] = -1;
    #####:  952:      }
        -:  953:
    #####:  954:      for (i = 0; i <= 2; i ++){
    #####:  955:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  956:	  state->coins += 2;
    #####:  957:	}
        -:  958:
    #####:  959:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  960:	  drawCard(currentPlayer, state);
    #####:  961:	  drawCard(currentPlayer, state);
    #####:  962:	}
        -:  963:	else{//Action Card
    #####:  964:	  state->numActions = state->numActions + 2;
        -:  965:	}
    #####:  966:      }
        -:  967:
    #####:  968:      return 0;
        -:  969:
        -:  970:    case ambassador:
    #####:  971:      j = 0;		//used to check if player has enough cards to discard
        -:  972:
    #####:  973:      if (choice2 > 2 || choice2 < 0)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      if (choice1 == handPos)
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  984:	{
    #####:  985:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  986:	    {
    #####:  987:	      j++;
    #####:  988:	    }
    #####:  989:	}
    #####:  990:      if (j < choice2)
        -:  991:	{
    #####:  992:	  return -1;
        -:  993:	}
        -:  994:
        -:  995:      if (DEBUG)
        -:  996:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  997:
        -:  998:      //increase supply count for choosen card by amount being discarded
    #####:  999:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1000:
        -: 1001:      //each other player gains a copy of revealed card
    #####: 1002:      for (i = 0; i < state->numPlayers; i++)
        -: 1003:	{
    #####: 1004:	  if (i != currentPlayer)
        -: 1005:	    {
    #####: 1006:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1007:	    }
    #####: 1008:	}
        -: 1009:
        -: 1010:      //discard played card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:
        -: 1013:      //trash copies of cards returned to supply
    #####: 1014:      for (j = 0; j < choice2; j++)
        -: 1015:	{
    #####: 1016:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1017:	    {
    #####: 1018:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1019:		{
    #####: 1020:		  discardCard(i, currentPlayer, state, 1);
    #####: 1021:		  break;
        -: 1022:		}
    #####: 1023:	    }
    #####: 1024:	}
        -: 1025:
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case cutpurse:
        -: 1029:
    #####: 1030:      updateCoins(currentPlayer, state, 2);
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
        -: 1034:	    {
    #####: 1035:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1036:		{
    #####: 1037:		  if (state->hand[i][j] == copper)
        -: 1038:		    {
    #####: 1039:		      discardCard(j, i, state, 0);
    #####: 1040:		      break;
        -: 1041:		    }
    #####: 1042:		  if (j == state->handCount[i])
        -: 1043:		    {
    #####: 1044:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1045:			{
        -: 1046:			  if (DEBUG)
        -: 1047:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1048:			}
    #####: 1049:		      break;
        -: 1050:		    }
    #####: 1051:		}
        -: 1052:
    #####: 1053:	    }
        -: 1054:
    #####: 1055:	}
        -: 1056:
        -: 1057:      //discard played card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
        -: 1059:
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:
        -: 1063:    case embargo:
        -: 1064:      //+2 Coins
    #####: 1065:      state->coins = state->coins + 2;
        -: 1066:
        -: 1067:      //see if selected pile is in play
    #####: 1068:      if ( state->supplyCount[choice1] == -1 )
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:
        -: 1073:      //add embargo token to selected supply pile
    #####: 1074:      state->embargoTokens[choice1]++;
        -: 1075:
        -: 1076:      //trash card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:    case outpost:
        -: 1081:      //set outpost flag
    #####: 1082:      state->outpostPlayed++;
        -: 1083:
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1086:      return 0;
        -: 1087:
        -: 1088:    case salvager:
        -: 1089:      //+1 buy
    #####: 1090:      state->numBuys++;
        -: 1091:
    #####: 1092:      if (choice1)
        -: 1093:	{
        -: 1094:	  //gain coins equal to trashed card
    #####: 1095:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1096:	  //trash card
    #####: 1097:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1098:	}
        -: 1099:
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:
        -: 1104:    case sea_hag:
    #####: 1105:      for (i = 0; i < state->numPlayers; i++){
    #####: 1106:	if (i != currentPlayer){
    #####: 1107:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1108:	  state->discardCount[i]++;
    #####: 1109:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1110:	}
    #####: 1111:      }
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case treasure_map:
        -: 1115:      //search hand for another treasure_map
    #####: 1116:      index = -1;
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1118:	{
    #####: 1119:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1120:	    {
    #####: 1121:	      index = i;
    #####: 1122:	      break;
        -: 1123:	    }
    #####: 1124:	}
    #####: 1125:      if (index > -1)
        -: 1126:	{
        -: 1127:	  //trash both treasure cards
    #####: 1128:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1129:	  discardCard(index, currentPlayer, state, 1);
        -: 1130:
        -: 1131:	  //gain 4 Gold cards
    #####: 1132:	  for (i = 0; i < 4; i++)
        -: 1133:	    {
    #####: 1134:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1135:	    }
        -: 1136:
        -: 1137:	  //return success
    #####: 1138:	  return 1;
        -: 1139:	}
        -: 1140:
        -: 1141:      //no second treasure_map found in hand
    #####: 1142:      return -1;
        -: 1143:    }
        -: 1144:
    #####: 1145:  return -1;
    #####: 1146:}
        -: 1147:
        -: 1148:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1149:{
        -: 1150:
        -: 1151:  //if card is not trashed, added to Played pile
    #####: 1152:  if (trashFlag < 1)
        -: 1153:    {
        -: 1154:      //add card to played pile
    #####: 1155:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1156:      state->playedCardCount++;
    #####: 1157:    }
        -: 1158:
        -: 1159:  //set played card to -1
    #####: 1160:  state->hand[currentPlayer][handPos] = -1;
        -: 1161:
        -: 1162:  //remove card from player's hand
    #####: 1163:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1164:    {
        -: 1165:      //reduce number of cards in hand
    #####: 1166:      state->handCount[currentPlayer]--;
    #####: 1167:    }
    #####: 1168:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1169:    {
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
    #####: 1172:    }
        -: 1173:  else
        -: 1174:    {
        -: 1175:      //replace discarded card with last card in hand
    #####: 1176:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1177:      //set last card to -1
    #####: 1178:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1179:      //reduce number of cards in hand
    #####: 1180:      state->handCount[currentPlayer]--;
        -: 1181:    }
        -: 1182:
    #####: 1183:  return 0;
        -: 1184:}
        -: 1185:
        -: 1186:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1187:{
        -: 1188:  //Note: supplyPos is enum of choosen card
        -: 1189:
        -: 1190:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1191:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1192:    {
    #####: 1193:      return -1;
        -: 1194:    }
        -: 1195:
        -: 1196:  //added card for [whoseTurn] current player:
        -: 1197:  // toFlag = 0 : add to discard
        -: 1198:  // toFlag = 1 : add to deck
        -: 1199:  // toFlag = 2 : add to hand
        -: 1200:
    #####: 1201:  if (toFlag == 1)
        -: 1202:    {
    #####: 1203:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1204:      state->deckCount[player]++;
    #####: 1205:    }
    #####: 1206:  else if (toFlag == 2)
        -: 1207:    {
    #####: 1208:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1209:      state->handCount[player]++;
    #####: 1210:    }
        -: 1211:  else
        -: 1212:    {
    #####: 1213:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1214:      state->discardCount[player]++;
        -: 1215:    }
        -: 1216:
        -: 1217:  //decrease number in supply pile
    #####: 1218:  state->supplyCount[supplyPos]--;
        -: 1219:
    #####: 1220:  return 0;
    #####: 1221:}
        -: 1222:
        -: 1223:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1224:{
        -: 1225:  int i;
        -: 1226:
        -: 1227:  //reset coin count
        4: 1228:  state->coins = 0;
        -: 1229:
        -: 1230:  //add coins for each Treasure card in player's hand
       32: 1231:  for (i = 0; i < state->handCount[player]; i++)
        -: 1232:    {
       12: 1233:      if (state->hand[player][i] == copper)
        -: 1234:	{
        1: 1235:	  state->coins += 1;
        1: 1236:	}
       11: 1237:      else if (state->hand[player][i] == silver)
        -: 1238:	{
        1: 1239:	  state->coins += 2;
        1: 1240:	}
       10: 1241:      else if (state->hand[player][i] == gold)
        -: 1242:	{
        5: 1243:	  state->coins += 3;
        5: 1244:	}
       12: 1245:    }
        -: 1246:
        -: 1247:  //add bonus
        4: 1248:  state->coins += bonus;
        -: 1249:
        4: 1250:  return 0;
        -: 1251:}
        -: 1252:
        -: 1253:// card effects
        -: 1254:// adventurer card effect
        -: 1255:int adventurerEffect(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1256:    int drawntreasure = 0;
        -: 1257:    int cardDrawn;
        -: 1258:    int temphand[MAX_HAND];
    #####: 1259:    int temphandCounter = 0;
        -: 1260:
        -: 1261:    // keep drawing cards til get 2 treasure
        -: 1262:    // treasures are recorded in hand, while nontreasure are counted in temphand and not recorded in hand
    #####: 1263:    while (drawntreasure < 2) {
    #####: 1264:        drawCard(currentPlayer, state);
        -: 1265:
    #####: 1266:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1]; // top of hand is most recent draw
    #####: 1267:        if (cardDrawn == copper || cardDrawn == silver) {
    #####: 1268:            drawntreasure++;
    #####: 1269:        }
        -: 1270:        else {
    #####: 1271:            temphand[temphandCounter] = cardDrawn;
    #####: 1272:            state->handCount[currentPlayer]--; // not treasure; don't count as adding tot hand
    #####: 1273:            temphandCounter++;
        -: 1274:        }
        -: 1275:    }
        -: 1276:
        -: 1277:    // discard all cards that were recorded in temphand
    #####: 1278:    while (temphandCounter-1 >= 0) {
    #####: 1279:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter-1];
    #####: 1280:        temphandCounter--;
        -: 1281:    }
        -: 1282:
        -: 1283:    // discard this played card
    #####: 1284:    discardCard(handPos, currentPlayer, state, 0);
        -: 1285:
    #####: 1286:    return 0;
        -: 1287:}
        -: 1288:
        -: 1289:// smithy card effect
        -: 1290:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1291:    int i;
        -: 1292:
        -: 1293:    // draw 3 cards
    #####: 1294:    for (i = 0; i < 4; i++) {
    #####: 1295:        drawCard(currentPlayer, state);
    #####: 1296:    }
        -: 1297:
        -: 1298:    // discard this played card
    #####: 1299:    discardCard(handPos, currentPlayer, state, 0);
        -: 1300:
    #####: 1301:    return 0;
        -: 1302:}
        -: 1303:
        -: 1304:// village card effect
        -: 1305:int villageEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1306:    // +1 card, +2 actions
    #####: 1307:    drawCard(currentPlayer, state);
    #####: 1308:    state->numActions = state->numBuys+2;
        -: 1309:
        -: 1310:    // discard this played card
    #####: 1311:    discardCard(handPos+1, currentPlayer, state, 0);
        -: 1312:
    #####: 1313:    return 0;
        -: 1314:}
        -: 1315:
        -: 1316:// council room effect
        -: 1317:int council_roomEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1318:    int i;
        -: 1319:    // +4 cards, +1 buy
    #####: 1320:    for (i = 0; i < 4; i++) {
    #####: 1321:        drawCard(currentPlayer, state);
    #####: 1322:    }
        -: 1323:
    #####: 1324:    state->numBuys++;
        -: 1325:
        -: 1326:    // +1 card for other players
    #####: 1327:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1328:        if (i != currentPlayer)
    #####: 1329:            drawCard(i, state);
    #####: 1330:    }
        -: 1331:
        -: 1332:    // discard this played card
    #####: 1333:    discardCard(handPos, currentPlayer, state, 0);
        -: 1334:
    #####: 1335:    return 0;
        -: 1336:}
        -: 1337:
        -: 1338:// remodel card effect
        -: 1339:int remodelEffect(struct gameState *state, int currentPlayer, int handPos, int trashChoice, int gainChoice) {
        -: 1340:    int i;
    #####: 1341:    int trashingCard = state->hand[currentPlayer][trashChoice];
        -: 1342:
        -: 1343:    // if trying to gain a card that costs more than +2 of trashed card, refuse action
    #####: 1344:    if (getCost(gainChoice)+2 > getCost(trashChoice))
    #####: 1345:        return -1;
        -: 1346:
        -: 1347:    // gain chosen card
    #####: 1348:    gainCard(gainChoice, state, 0, currentPlayer);
        -: 1349:
        -: 1350:    // discard card from hand
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:    return 0;
    #####: 1354:}
        -: 1355://end of dominion.c
        -: 1356:
unittest4.c:

** Unit Testing for kingdomCards() **

** Test 1: kingdom cards stored correctly **
Expected card id: 7, Actual card id: 7
TEST PASSED
Expected card id: 13, Actual card id: 13
TEST PASSED
Expected card id: 8, Actual card id: 8
TEST PASSED
Expected card id: 9, Actual card id: 9
TEST PASSED
Expected card id: 10, Actual card id: 10
TEST PASSED
Expected card id: 11, Actual card id: 11
TEST PASSED
Expected card id: 14, Actual card id: 14
TEST PASSED
Expected card id: 20, Actual card id: 20
TEST PASSED
Expected card id: 25, Actual card id: 25
TEST PASSED
Expected card id: 24, Actual card id: 24
TEST PASSED
File 'unittest4.c'
Lines executed:97.14% of 35
unittest4.c:creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:6.09% of 640
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
    #####:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        1:   23:  int* k = malloc(10 * sizeof(int));
        1:   24:  k[0] = k1;
        1:   25:  k[1] = k2;
        1:   26:  k[2] = k3;
        1:   27:  k[3] = k4;
        1:   28:  k[4] = k5;
        1:   29:  k[5] = k6;
        1:   30:  k[6] = k7;
        1:   31:  k[7] = k8;
        1:   32:  k[8] = k9;
        1:   33:  k[9] = k10;
        1:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    #####:   65:        }
    #####:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
    #####:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    #####:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    #####:  130:	}
        -:  131:
    #####:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
    #####:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;
    #####:  150:	}
    #####:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    #####:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    #####:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
    #####:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
    #####:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
    #####:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
    #####:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
    #####:  226:  }
        -:  227:
    #####:  228:  return 0;
    #####:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        5:  406:	  j++;
        5:  407:	}
      100:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        5:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
    #####:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        return adventurerEffect(state, currentPlayer, handPos);
        -:  671:
        -:  672:    case council_room:
    #####:  673:        return council_roomEffect(state, currentPlayer, handPos);
        -:  674:
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:
    #####:  726:      return 0;
        -:  727:
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:
    #####:  764:      return 0;
        -:  765:
        -:  766:    case remodel:
    #####:  767:        return remodelEffect(state, currentPlayer, handPos, choice1, choice2);
        -:  768:
        -:  769:    case smithy:
    #####:  770:        return smithyEffect(state, currentPlayer, handPos);
        -:  771:
        -:  772:    case village:
    #####:  773:        return villageEffect(state, currentPlayer, handPos);
        -:  774:
        -:  775:    case baron:
    #####:  776:      state->numBuys++;//Increase buys by 1!
    #####:  777:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  778:	int p = 0;//Iterator for hand!
    #####:  779:	int card_not_discarded = 1;//Flag for discard set!
    #####:  780:	while(card_not_discarded){
    #####:  781:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  782:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  783:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  784:	    state->discardCount[currentPlayer]++;
    #####:  785:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  786:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  787:	    }
    #####:  788:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  789:	    state->handCount[currentPlayer]--;
    #####:  790:	    card_not_discarded = 0;//Exit the loop
    #####:  791:	  }
    #####:  792:	  else if (p > state->handCount[currentPlayer]){
        -:  793:	    if(DEBUG) {
        -:  794:	      printf("No estate cards in your hand, invalid choice\n");
        -:  795:	      printf("Must gain an estate if there are any\n");
        -:  796:	    }
    #####:  797:	    if (supplyCount(estate, state) > 0){
    #####:  798:	      gainCard(estate, state, 0, currentPlayer);
    #####:  799:	      state->supplyCount[estate]--;//Decrement estates
    #####:  800:	      if (supplyCount(estate, state) == 0){
    #####:  801:		isGameOver(state);
    #####:  802:	      }
    #####:  803:	    }
    #####:  804:	    card_not_discarded = 0;//Exit the loop
    #####:  805:	  }
        -:  806:
        -:  807:	  else{
    #####:  808:	    p++;//Next card
        -:  809:	  }
        -:  810:	}
    #####:  811:      }
        -:  812:
        -:  813:      else{
    #####:  814:	if (supplyCount(estate, state) > 0){
    #####:  815:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  816:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  817:	  if (supplyCount(estate, state) == 0){
    #####:  818:	    isGameOver(state);
    #####:  819:	  }
    #####:  820:	}
        -:  821:      }
        -:  822:
        -:  823:
    #####:  824:      return 0;
        -:  825:
        -:  826:    case great_hall:
        -:  827:      //+1 Card
    #####:  828:      drawCard(currentPlayer, state);
        -:  829:
        -:  830:      //+1 Actions
    #####:  831:      state->numActions++;
        -:  832:
        -:  833:      //discard card from hand
    #####:  834:      discardCard(handPos, currentPlayer, state, 0);
    #####:  835:      return 0;
        -:  836:
        -:  837:    case minion:
        -:  838:      //+1 action
    #####:  839:      state->numActions++;
        -:  840:
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
        -:  843:
    #####:  844:      if (choice1)		//+2 coins
        -:  845:	{
    #####:  846:	  state->coins = state->coins + 2;
    #####:  847:	}
        -:  848:
    #####:  849:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  850:	{
        -:  851:	  //discard hand
    #####:  852:	  while(numHandCards(state) > 0)
        -:  853:	    {
    #####:  854:	      discardCard(handPos, currentPlayer, state, 0);
        -:  855:	    }
        -:  856:
        -:  857:	  //draw 4
    #####:  858:	  for (i = 0; i < 4; i++)
        -:  859:	    {
    #####:  860:	      drawCard(currentPlayer, state);
    #####:  861:	    }
        -:  862:
        -:  863:	  //other players discard hand and redraw if hand size > 4
    #####:  864:	  for (i = 0; i < state->numPlayers; i++)
        -:  865:	    {
    #####:  866:	      if (i != currentPlayer)
        -:  867:		{
    #####:  868:		  if ( state->handCount[i] > 4 )
        -:  869:		    {
        -:  870:		      //discard hand
    #####:  871:		      while( state->handCount[i] > 0 )
        -:  872:			{
    #####:  873:			  discardCard(handPos, i, state, 0);
        -:  874:			}
        -:  875:
        -:  876:		      //draw 4
    #####:  877:		      for (j = 0; j < 4; j++)
        -:  878:			{
    #####:  879:			  drawCard(i, state);
    #####:  880:			}
    #####:  881:		    }
    #####:  882:		}
    #####:  883:	    }
        -:  884:
    #####:  885:	}
    #####:  886:      return 0;
        -:  887:
        -:  888:    case steward:
    #####:  889:      if (choice1 == 1)
        -:  890:	{
        -:  891:	  //+2 cards
    #####:  892:	  drawCard(currentPlayer, state);
    #####:  893:	  drawCard(currentPlayer, state);
    #####:  894:	}
    #####:  895:      else if (choice1 == 2)
        -:  896:	{
        -:  897:	  //+2 coins
    #####:  898:	  state->coins = state->coins + 2;
    #####:  899:	}
        -:  900:      else
        -:  901:	{
        -:  902:	  //trash 2 cards in hand
    #####:  903:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  904:	  discardCard(choice3, currentPlayer, state, 1);
        -:  905:	}
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
    #####:  909:      return 0;
        -:  910:
        -:  911:    case tribute:
    #####:  912:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  913:	if (state->deckCount[nextPlayer] > 0){
    #####:  914:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:	  state->deckCount[nextPlayer]--;
    #####:  916:	}
    #####:  917:	else if (state->discardCount[nextPlayer] > 0){
    #####:  918:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  919:	  state->discardCount[nextPlayer]--;
    #####:  920:	}
        -:  921:	else{
        -:  922:	  //No Card to Reveal
        -:  923:	  if (DEBUG){
        -:  924:	    printf("No cards to reveal\n");
        -:  925:	  }
        -:  926:	}
    #####:  927:      }
        -:  928:
        -:  929:      else{
    #####:  930:	if (state->deckCount[nextPlayer] == 0){
    #####:  931:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  932:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  933:	    state->deckCount[nextPlayer]++;
    #####:  934:	    state->discard[nextPlayer][i] = -1;
    #####:  935:	    state->discardCount[nextPlayer]--;
    #####:  936:	  }
        -:  937:
    #####:  938:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  939:	}
    #####:  940:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
    #####:  943:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  945:	state->deckCount[nextPlayer]--;
        -:  946:      }
        -:  947:
    #####:  948:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  949:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  950:	state->playedCardCount++;
    #####:  951:	tributeRevealedCards[1] = -1;
    #####:  952:      }
        -:  953:
    #####:  954:      for (i = 0; i <= 2; i ++){
    #####:  955:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  956:	  state->coins += 2;
    #####:  957:	}
        -:  958:
    #####:  959:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  960:	  drawCard(currentPlayer, state);
    #####:  961:	  drawCard(currentPlayer, state);
    #####:  962:	}
        -:  963:	else{//Action Card
    #####:  964:	  state->numActions = state->numActions + 2;
        -:  965:	}
    #####:  966:      }
        -:  967:
    #####:  968:      return 0;
        -:  969:
        -:  970:    case ambassador:
    #####:  971:      j = 0;		//used to check if player has enough cards to discard
        -:  972:
    #####:  973:      if (choice2 > 2 || choice2 < 0)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      if (choice1 == handPos)
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  984:	{
    #####:  985:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  986:	    {
    #####:  987:	      j++;
    #####:  988:	    }
    #####:  989:	}
    #####:  990:      if (j < choice2)
        -:  991:	{
    #####:  992:	  return -1;
        -:  993:	}
        -:  994:
        -:  995:      if (DEBUG)
        -:  996:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  997:
        -:  998:      //increase supply count for choosen card by amount being discarded
    #####:  999:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1000:
        -: 1001:      //each other player gains a copy of revealed card
    #####: 1002:      for (i = 0; i < state->numPlayers; i++)
        -: 1003:	{
    #####: 1004:	  if (i != currentPlayer)
        -: 1005:	    {
    #####: 1006:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1007:	    }
    #####: 1008:	}
        -: 1009:
        -: 1010:      //discard played card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:
        -: 1013:      //trash copies of cards returned to supply
    #####: 1014:      for (j = 0; j < choice2; j++)
        -: 1015:	{
    #####: 1016:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1017:	    {
    #####: 1018:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1019:		{
    #####: 1020:		  discardCard(i, currentPlayer, state, 1);
    #####: 1021:		  break;
        -: 1022:		}
    #####: 1023:	    }
    #####: 1024:	}
        -: 1025:
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case cutpurse:
        -: 1029:
    #####: 1030:      updateCoins(currentPlayer, state, 2);
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
        -: 1034:	    {
    #####: 1035:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1036:		{
    #####: 1037:		  if (state->hand[i][j] == copper)
        -: 1038:		    {
    #####: 1039:		      discardCard(j, i, state, 0);
    #####: 1040:		      break;
        -: 1041:		    }
    #####: 1042:		  if (j == state->handCount[i])
        -: 1043:		    {
    #####: 1044:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1045:			{
        -: 1046:			  if (DEBUG)
        -: 1047:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1048:			}
    #####: 1049:		      break;
        -: 1050:		    }
    #####: 1051:		}
        -: 1052:
    #####: 1053:	    }
        -: 1054:
    #####: 1055:	}
        -: 1056:
        -: 1057:      //discard played card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
        -: 1059:
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:
        -: 1063:    case embargo:
        -: 1064:      //+2 Coins
    #####: 1065:      state->coins = state->coins + 2;
        -: 1066:
        -: 1067:      //see if selected pile is in play
    #####: 1068:      if ( state->supplyCount[choice1] == -1 )
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:
        -: 1073:      //add embargo token to selected supply pile
    #####: 1074:      state->embargoTokens[choice1]++;
        -: 1075:
        -: 1076:      //trash card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:    case outpost:
        -: 1081:      //set outpost flag
    #####: 1082:      state->outpostPlayed++;
        -: 1083:
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1086:      return 0;
        -: 1087:
        -: 1088:    case salvager:
        -: 1089:      //+1 buy
    #####: 1090:      state->numBuys++;
        -: 1091:
    #####: 1092:      if (choice1)
        -: 1093:	{
        -: 1094:	  //gain coins equal to trashed card
    #####: 1095:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1096:	  //trash card
    #####: 1097:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1098:	}
        -: 1099:
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:
        -: 1104:    case sea_hag:
    #####: 1105:      for (i = 0; i < state->numPlayers; i++){
    #####: 1106:	if (i != currentPlayer){
    #####: 1107:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1108:	  state->discardCount[i]++;
    #####: 1109:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1110:	}
    #####: 1111:      }
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case treasure_map:
        -: 1115:      //search hand for another treasure_map
    #####: 1116:      index = -1;
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1118:	{
    #####: 1119:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1120:	    {
    #####: 1121:	      index = i;
    #####: 1122:	      break;
        -: 1123:	    }
    #####: 1124:	}
    #####: 1125:      if (index > -1)
        -: 1126:	{
        -: 1127:	  //trash both treasure cards
    #####: 1128:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1129:	  discardCard(index, currentPlayer, state, 1);
        -: 1130:
        -: 1131:	  //gain 4 Gold cards
    #####: 1132:	  for (i = 0; i < 4; i++)
        -: 1133:	    {
    #####: 1134:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1135:	    }
        -: 1136:
        -: 1137:	  //return success
    #####: 1138:	  return 1;
        -: 1139:	}
        -: 1140:
        -: 1141:      //no second treasure_map found in hand
    #####: 1142:      return -1;
        -: 1143:    }
        -: 1144:
    #####: 1145:  return -1;
    #####: 1146:}
        -: 1147:
        -: 1148:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1149:{
        -: 1150:
        -: 1151:  //if card is not trashed, added to Played pile
    #####: 1152:  if (trashFlag < 1)
        -: 1153:    {
        -: 1154:      //add card to played pile
    #####: 1155:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1156:      state->playedCardCount++;
    #####: 1157:    }
        -: 1158:
        -: 1159:  //set played card to -1
    #####: 1160:  state->hand[currentPlayer][handPos] = -1;
        -: 1161:
        -: 1162:  //remove card from player's hand
    #####: 1163:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1164:    {
        -: 1165:      //reduce number of cards in hand
    #####: 1166:      state->handCount[currentPlayer]--;
    #####: 1167:    }
    #####: 1168:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1169:    {
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
    #####: 1172:    }
        -: 1173:  else
        -: 1174:    {
        -: 1175:      //replace discarded card with last card in hand
    #####: 1176:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1177:      //set last card to -1
    #####: 1178:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1179:      //reduce number of cards in hand
    #####: 1180:      state->handCount[currentPlayer]--;
        -: 1181:    }
        -: 1182:
    #####: 1183:  return 0;
        -: 1184:}
        -: 1185:
        -: 1186:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1187:{
        -: 1188:  //Note: supplyPos is enum of choosen card
        -: 1189:
        -: 1190:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1191:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1192:    {
    #####: 1193:      return -1;
        -: 1194:    }
        -: 1195:
        -: 1196:  //added card for [whoseTurn] current player:
        -: 1197:  // toFlag = 0 : add to discard
        -: 1198:  // toFlag = 1 : add to deck
        -: 1199:  // toFlag = 2 : add to hand
        -: 1200:
    #####: 1201:  if (toFlag == 1)
        -: 1202:    {
    #####: 1203:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1204:      state->deckCount[player]++;
    #####: 1205:    }
    #####: 1206:  else if (toFlag == 2)
        -: 1207:    {
    #####: 1208:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1209:      state->handCount[player]++;
    #####: 1210:    }
        -: 1211:  else
        -: 1212:    {
    #####: 1213:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1214:      state->discardCount[player]++;
        -: 1215:    }
        -: 1216:
        -: 1217:  //decrease number in supply pile
    #####: 1218:  state->supplyCount[supplyPos]--;
        -: 1219:
    #####: 1220:  return 0;
    #####: 1221:}
        -: 1222:
        -: 1223:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1224:{
        -: 1225:  int i;
        -: 1226:
        -: 1227:  //reset coin count
        4: 1228:  state->coins = 0;
        -: 1229:
        -: 1230:  //add coins for each Treasure card in player's hand
       32: 1231:  for (i = 0; i < state->handCount[player]; i++)
        -: 1232:    {
       12: 1233:      if (state->hand[player][i] == copper)
        -: 1234:	{
        1: 1235:	  state->coins += 1;
        1: 1236:	}
       11: 1237:      else if (state->hand[player][i] == silver)
        -: 1238:	{
        1: 1239:	  state->coins += 2;
        1: 1240:	}
       10: 1241:      else if (state->hand[player][i] == gold)
        -: 1242:	{
        5: 1243:	  state->coins += 3;
        5: 1244:	}
       12: 1245:    }
        -: 1246:
        -: 1247:  //add bonus
        4: 1248:  state->coins += bonus;
        -: 1249:
        4: 1250:  return 0;
        -: 1251:}
        -: 1252:
        -: 1253:// card effects
        -: 1254:// adventurer card effect
        -: 1255:int adventurerEffect(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1256:    int drawntreasure = 0;
        -: 1257:    int cardDrawn;
        -: 1258:    int temphand[MAX_HAND];
    #####: 1259:    int temphandCounter = 0;
        -: 1260:
        -: 1261:    // keep drawing cards til get 2 treasure
        -: 1262:    // treasures are recorded in hand, while nontreasure are counted in temphand and not recorded in hand
    #####: 1263:    while (drawntreasure < 2) {
    #####: 1264:        drawCard(currentPlayer, state);
        -: 1265:
    #####: 1266:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1]; // top of hand is most recent draw
    #####: 1267:        if (cardDrawn == copper || cardDrawn == silver) {
    #####: 1268:            drawntreasure++;
    #####: 1269:        }
        -: 1270:        else {
    #####: 1271:            temphand[temphandCounter] = cardDrawn;
    #####: 1272:            state->handCount[currentPlayer]--; // not treasure; don't count as adding tot hand
    #####: 1273:            temphandCounter++;
        -: 1274:        }
        -: 1275:    }
        -: 1276:
        -: 1277:    // discard all cards that were recorded in temphand
    #####: 1278:    while (temphandCounter-1 >= 0) {
    #####: 1279:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter-1];
    #####: 1280:        temphandCounter--;
        -: 1281:    }
        -: 1282:
        -: 1283:    // discard this played card
    #####: 1284:    discardCard(handPos, currentPlayer, state, 0);
        -: 1285:
    #####: 1286:    return 0;
        -: 1287:}
        -: 1288:
        -: 1289:// smithy card effect
        -: 1290:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1291:    int i;
        -: 1292:
        -: 1293:    // draw 3 cards
    #####: 1294:    for (i = 0; i < 4; i++) {
    #####: 1295:        drawCard(currentPlayer, state);
    #####: 1296:    }
        -: 1297:
        -: 1298:    // discard this played card
    #####: 1299:    discardCard(handPos, currentPlayer, state, 0);
        -: 1300:
    #####: 1301:    return 0;
        -: 1302:}
        -: 1303:
        -: 1304:// village card effect
        -: 1305:int villageEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1306:    // +1 card, +2 actions
    #####: 1307:    drawCard(currentPlayer, state);
    #####: 1308:    state->numActions = state->numBuys+2;
        -: 1309:
        -: 1310:    // discard this played card
    #####: 1311:    discardCard(handPos+1, currentPlayer, state, 0);
        -: 1312:
    #####: 1313:    return 0;
        -: 1314:}
        -: 1315:
        -: 1316:// council room effect
        -: 1317:int council_roomEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1318:    int i;
        -: 1319:    // +4 cards, +1 buy
    #####: 1320:    for (i = 0; i < 4; i++) {
    #####: 1321:        drawCard(currentPlayer, state);
    #####: 1322:    }
        -: 1323:
    #####: 1324:    state->numBuys++;
        -: 1325:
        -: 1326:    // +1 card for other players
    #####: 1327:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1328:        if (i != currentPlayer)
    #####: 1329:            drawCard(i, state);
    #####: 1330:    }
        -: 1331:
        -: 1332:    // discard this played card
    #####: 1333:    discardCard(handPos, currentPlayer, state, 0);
        -: 1334:
    #####: 1335:    return 0;
        -: 1336:}
        -: 1337:
        -: 1338:// remodel card effect
        -: 1339:int remodelEffect(struct gameState *state, int currentPlayer, int handPos, int trashChoice, int gainChoice) {
        -: 1340:    int i;
    #####: 1341:    int trashingCard = state->hand[currentPlayer][trashChoice];
        -: 1342:
        -: 1343:    // if trying to gain a card that costs more than +2 of trashed card, refuse action
    #####: 1344:    if (getCost(gainChoice)+2 > getCost(trashChoice))
    #####: 1345:        return -1;
        -: 1346:
        -: 1347:    // gain chosen card
    #####: 1348:    gainCard(gainChoice, state, 0, currentPlayer);
        -: 1349:
        -: 1350:    // discard card from hand
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:    return 0;
    #####: 1354:}
        -: 1355://end of dominion.c
        -: 1356:
cardtest1.c:

Card Test Suite for Smithy

** Test 1: function returns correct value **
Expected result: 0. Actual result: 0
TEST PASSED

** Test 2: player draws 3 cards to hand and discards played card **
Expected hand size: 8. Actual hand size: 9
TEST FAILED

** Test 3: player draws 3 cards from deck **
Expected deck size: 2. Actual deck size: 1
TEST FAILED

** Test 4: player's discard pile now has played card **
Expected discard size: 1. Actual discard size: 0
TEST FAILED

** Test 5: kingdom cards are not affected **
Kingdom card #7 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #13 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #10 expected count: 8. Actual count: 8
TEST PASSED
Kingdom card #19 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #8 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #21 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #11 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #22 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #14 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #25 expected count: 10. Actual count: 10
TEST PASSED

** Test 6: opponent state does not change **
Expected opponent hand size: 0. Actual hand size: 0
TEST PASSED
Expected opponent deck size: 10. Actual deck size: 10
TEST PASSED
Expected opponent discard size: 0. Actual discard size: 0
TEST PASSED
File 'cardtest1.c'
Lines executed:100.00% of 49
cardtest1.c:creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:25.16% of 640
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
       28:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       28:   11:  if (*(int*)a < *(int*)b)
       10:   12:    return -1;
       18:   13:  return 0;
       28:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        2:   23:  int* k = malloc(10 * sizeof(int));
        2:   24:  k[0] = k1;
        2:   25:  k[1] = k2;
        2:   26:  k[2] = k3;
        2:   27:  k[3] = k4;
        2:   28:  k[4] = k5;
        2:   29:  k[5] = k6;
        2:   30:  k[6] = k7;
        2:   31:  k[7] = k8;
        2:   32:  k[8] = k9;
        2:   33:  k[9] = k10;
        2:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      190:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      100:   65:        }
       10:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        1:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        1:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       20:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        1:  115:		  if (numPlayers == 2){
        1:  116:		    state->supplyCount[i] = 8;
        1:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        1:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      145:  130:	}
        -:  131:
       20:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        6:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        6:  145:	}
       32:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;
       14:  150:	}
        2:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        6:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        2:  160:    }
        -:  161:
        -:  162:  //draw player hands
        6:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        2:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
       27:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        5:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        1:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       44:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
      114:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       37:  219:      state->deck[player][i] = state->deck[player][i+1];
       37:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       44:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
       20:  226:  }
        -:  227:
        2:  228:  return 0;
        2:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        2:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        5:  406:	  j++;
        5:  407:	}
      100:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        5:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        9:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
        9:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        9:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        9:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        9:  576:    state->deckCount[player]--;
        9:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        9:  580:  return 0;
        9:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        1:  653:  int currentPlayer = whoseTurn(state);
        1:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        1:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        1:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        1:  660:  int z = 0;// this is the counter for the temp hand
        1:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
        1:  667:  switch( card )
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        return adventurerEffect(state, currentPlayer, handPos);
        -:  671:
        -:  672:    case council_room:
    #####:  673:        return council_roomEffect(state, currentPlayer, handPos);
        -:  674:
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:
    #####:  726:      return 0;
        -:  727:
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:
    #####:  764:      return 0;
        -:  765:
        -:  766:    case remodel:
    #####:  767:        return remodelEffect(state, currentPlayer, handPos, choice1, choice2);
        -:  768:
        -:  769:    case smithy:
        1:  770:        return smithyEffect(state, currentPlayer, handPos);
        -:  771:
        -:  772:    case village:
    #####:  773:        return villageEffect(state, currentPlayer, handPos);
        -:  774:
        -:  775:    case baron:
    #####:  776:      state->numBuys++;//Increase buys by 1!
    #####:  777:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  778:	int p = 0;//Iterator for hand!
    #####:  779:	int card_not_discarded = 1;//Flag for discard set!
    #####:  780:	while(card_not_discarded){
    #####:  781:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  782:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  783:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  784:	    state->discardCount[currentPlayer]++;
    #####:  785:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  786:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  787:	    }
    #####:  788:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  789:	    state->handCount[currentPlayer]--;
    #####:  790:	    card_not_discarded = 0;//Exit the loop
    #####:  791:	  }
    #####:  792:	  else if (p > state->handCount[currentPlayer]){
        -:  793:	    if(DEBUG) {
        -:  794:	      printf("No estate cards in your hand, invalid choice\n");
        -:  795:	      printf("Must gain an estate if there are any\n");
        -:  796:	    }
    #####:  797:	    if (supplyCount(estate, state) > 0){
    #####:  798:	      gainCard(estate, state, 0, currentPlayer);
    #####:  799:	      state->supplyCount[estate]--;//Decrement estates
    #####:  800:	      if (supplyCount(estate, state) == 0){
    #####:  801:		isGameOver(state);
    #####:  802:	      }
    #####:  803:	    }
    #####:  804:	    card_not_discarded = 0;//Exit the loop
    #####:  805:	  }
        -:  806:
        -:  807:	  else{
    #####:  808:	    p++;//Next card
        -:  809:	  }
        -:  810:	}
    #####:  811:      }
        -:  812:
        -:  813:      else{
    #####:  814:	if (supplyCount(estate, state) > 0){
    #####:  815:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  816:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  817:	  if (supplyCount(estate, state) == 0){
    #####:  818:	    isGameOver(state);
    #####:  819:	  }
    #####:  820:	}
        -:  821:      }
        -:  822:
        -:  823:
    #####:  824:      return 0;
        -:  825:
        -:  826:    case great_hall:
        -:  827:      //+1 Card
    #####:  828:      drawCard(currentPlayer, state);
        -:  829:
        -:  830:      //+1 Actions
    #####:  831:      state->numActions++;
        -:  832:
        -:  833:      //discard card from hand
    #####:  834:      discardCard(handPos, currentPlayer, state, 0);
    #####:  835:      return 0;
        -:  836:
        -:  837:    case minion:
        -:  838:      //+1 action
    #####:  839:      state->numActions++;
        -:  840:
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
        -:  843:
    #####:  844:      if (choice1)		//+2 coins
        -:  845:	{
    #####:  846:	  state->coins = state->coins + 2;
    #####:  847:	}
        -:  848:
    #####:  849:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  850:	{
        -:  851:	  //discard hand
    #####:  852:	  while(numHandCards(state) > 0)
        -:  853:	    {
    #####:  854:	      discardCard(handPos, currentPlayer, state, 0);
        -:  855:	    }
        -:  856:
        -:  857:	  //draw 4
    #####:  858:	  for (i = 0; i < 4; i++)
        -:  859:	    {
    #####:  860:	      drawCard(currentPlayer, state);
    #####:  861:	    }
        -:  862:
        -:  863:	  //other players discard hand and redraw if hand size > 4
    #####:  864:	  for (i = 0; i < state->numPlayers; i++)
        -:  865:	    {
    #####:  866:	      if (i != currentPlayer)
        -:  867:		{
    #####:  868:		  if ( state->handCount[i] > 4 )
        -:  869:		    {
        -:  870:		      //discard hand
    #####:  871:		      while( state->handCount[i] > 0 )
        -:  872:			{
    #####:  873:			  discardCard(handPos, i, state, 0);
        -:  874:			}
        -:  875:
        -:  876:		      //draw 4
    #####:  877:		      for (j = 0; j < 4; j++)
        -:  878:			{
    #####:  879:			  drawCard(i, state);
    #####:  880:			}
    #####:  881:		    }
    #####:  882:		}
    #####:  883:	    }
        -:  884:
    #####:  885:	}
    #####:  886:      return 0;
        -:  887:
        -:  888:    case steward:
    #####:  889:      if (choice1 == 1)
        -:  890:	{
        -:  891:	  //+2 cards
    #####:  892:	  drawCard(currentPlayer, state);
    #####:  893:	  drawCard(currentPlayer, state);
    #####:  894:	}
    #####:  895:      else if (choice1 == 2)
        -:  896:	{
        -:  897:	  //+2 coins
    #####:  898:	  state->coins = state->coins + 2;
    #####:  899:	}
        -:  900:      else
        -:  901:	{
        -:  902:	  //trash 2 cards in hand
    #####:  903:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  904:	  discardCard(choice3, currentPlayer, state, 1);
        -:  905:	}
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
    #####:  909:      return 0;
        -:  910:
        -:  911:    case tribute:
    #####:  912:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  913:	if (state->deckCount[nextPlayer] > 0){
    #####:  914:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:	  state->deckCount[nextPlayer]--;
    #####:  916:	}
    #####:  917:	else if (state->discardCount[nextPlayer] > 0){
    #####:  918:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  919:	  state->discardCount[nextPlayer]--;
    #####:  920:	}
        -:  921:	else{
        -:  922:	  //No Card to Reveal
        -:  923:	  if (DEBUG){
        -:  924:	    printf("No cards to reveal\n");
        -:  925:	  }
        -:  926:	}
    #####:  927:      }
        -:  928:
        -:  929:      else{
    #####:  930:	if (state->deckCount[nextPlayer] == 0){
    #####:  931:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  932:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  933:	    state->deckCount[nextPlayer]++;
    #####:  934:	    state->discard[nextPlayer][i] = -1;
    #####:  935:	    state->discardCount[nextPlayer]--;
    #####:  936:	  }
        -:  937:
    #####:  938:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  939:	}
    #####:  940:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
    #####:  943:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  945:	state->deckCount[nextPlayer]--;
        -:  946:      }
        -:  947:
    #####:  948:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  949:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  950:	state->playedCardCount++;
    #####:  951:	tributeRevealedCards[1] = -1;
    #####:  952:      }
        -:  953:
    #####:  954:      for (i = 0; i <= 2; i ++){
    #####:  955:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  956:	  state->coins += 2;
    #####:  957:	}
        -:  958:
    #####:  959:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  960:	  drawCard(currentPlayer, state);
    #####:  961:	  drawCard(currentPlayer, state);
    #####:  962:	}
        -:  963:	else{//Action Card
    #####:  964:	  state->numActions = state->numActions + 2;
        -:  965:	}
    #####:  966:      }
        -:  967:
    #####:  968:      return 0;
        -:  969:
        -:  970:    case ambassador:
    #####:  971:      j = 0;		//used to check if player has enough cards to discard
        -:  972:
    #####:  973:      if (choice2 > 2 || choice2 < 0)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      if (choice1 == handPos)
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  984:	{
    #####:  985:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  986:	    {
    #####:  987:	      j++;
    #####:  988:	    }
    #####:  989:	}
    #####:  990:      if (j < choice2)
        -:  991:	{
    #####:  992:	  return -1;
        -:  993:	}
        -:  994:
        -:  995:      if (DEBUG)
        -:  996:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  997:
        -:  998:      //increase supply count for choosen card by amount being discarded
    #####:  999:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1000:
        -: 1001:      //each other player gains a copy of revealed card
    #####: 1002:      for (i = 0; i < state->numPlayers; i++)
        -: 1003:	{
    #####: 1004:	  if (i != currentPlayer)
        -: 1005:	    {
    #####: 1006:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1007:	    }
    #####: 1008:	}
        -: 1009:
        -: 1010:      //discard played card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:
        -: 1013:      //trash copies of cards returned to supply
    #####: 1014:      for (j = 0; j < choice2; j++)
        -: 1015:	{
    #####: 1016:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1017:	    {
    #####: 1018:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1019:		{
    #####: 1020:		  discardCard(i, currentPlayer, state, 1);
    #####: 1021:		  break;
        -: 1022:		}
    #####: 1023:	    }
    #####: 1024:	}
        -: 1025:
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case cutpurse:
        -: 1029:
    #####: 1030:      updateCoins(currentPlayer, state, 2);
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
        -: 1034:	    {
    #####: 1035:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1036:		{
    #####: 1037:		  if (state->hand[i][j] == copper)
        -: 1038:		    {
    #####: 1039:		      discardCard(j, i, state, 0);
    #####: 1040:		      break;
        -: 1041:		    }
    #####: 1042:		  if (j == state->handCount[i])
        -: 1043:		    {
    #####: 1044:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1045:			{
        -: 1046:			  if (DEBUG)
        -: 1047:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1048:			}
    #####: 1049:		      break;
        -: 1050:		    }
    #####: 1051:		}
        -: 1052:
    #####: 1053:	    }
        -: 1054:
    #####: 1055:	}
        -: 1056:
        -: 1057:      //discard played card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
        -: 1059:
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:
        -: 1063:    case embargo:
        -: 1064:      //+2 Coins
    #####: 1065:      state->coins = state->coins + 2;
        -: 1066:
        -: 1067:      //see if selected pile is in play
    #####: 1068:      if ( state->supplyCount[choice1] == -1 )
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:
        -: 1073:      //add embargo token to selected supply pile
    #####: 1074:      state->embargoTokens[choice1]++;
        -: 1075:
        -: 1076:      //trash card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:    case outpost:
        -: 1081:      //set outpost flag
    #####: 1082:      state->outpostPlayed++;
        -: 1083:
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1086:      return 0;
        -: 1087:
        -: 1088:    case salvager:
        -: 1089:      //+1 buy
    #####: 1090:      state->numBuys++;
        -: 1091:
    #####: 1092:      if (choice1)
        -: 1093:	{
        -: 1094:	  //gain coins equal to trashed card
    #####: 1095:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1096:	  //trash card
    #####: 1097:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1098:	}
        -: 1099:
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:
        -: 1104:    case sea_hag:
    #####: 1105:      for (i = 0; i < state->numPlayers; i++){
    #####: 1106:	if (i != currentPlayer){
    #####: 1107:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1108:	  state->discardCount[i]++;
    #####: 1109:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1110:	}
    #####: 1111:      }
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case treasure_map:
        -: 1115:      //search hand for another treasure_map
    #####: 1116:      index = -1;
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1118:	{
    #####: 1119:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1120:	    {
    #####: 1121:	      index = i;
    #####: 1122:	      break;
        -: 1123:	    }
    #####: 1124:	}
    #####: 1125:      if (index > -1)
        -: 1126:	{
        -: 1127:	  //trash both treasure cards
    #####: 1128:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1129:	  discardCard(index, currentPlayer, state, 1);
        -: 1130:
        -: 1131:	  //gain 4 Gold cards
    #####: 1132:	  for (i = 0; i < 4; i++)
        -: 1133:	    {
    #####: 1134:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1135:	    }
        -: 1136:
        -: 1137:	  //return success
    #####: 1138:	  return 1;
        -: 1139:	}
        -: 1140:
        -: 1141:      //no second treasure_map found in hand
    #####: 1142:      return -1;
        -: 1143:    }
        -: 1144:
    #####: 1145:  return -1;
        1: 1146:}
        -: 1147:
        -: 1148:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1149:{
        -: 1150:
        -: 1151:  //if card is not trashed, added to Played pile
        1: 1152:  if (trashFlag < 1)
        -: 1153:    {
        -: 1154:      //add card to played pile
        1: 1155:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1156:      state->playedCardCount++;
        1: 1157:    }
        -: 1158:
        -: 1159:  //set played card to -1
        1: 1160:  state->hand[currentPlayer][handPos] = -1;
        -: 1161:
        -: 1162:  //remove card from player's hand
        1: 1163:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1164:    {
        -: 1165:      //reduce number of cards in hand
    #####: 1166:      state->handCount[currentPlayer]--;
    #####: 1167:    }
        1: 1168:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1169:    {
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
    #####: 1172:    }
        -: 1173:  else
        -: 1174:    {
        -: 1175:      //replace discarded card with last card in hand
        1: 1176:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1177:      //set last card to -1
        1: 1178:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1179:      //reduce number of cards in hand
        1: 1180:      state->handCount[currentPlayer]--;
        -: 1181:    }
        -: 1182:
        1: 1183:  return 0;
        -: 1184:}
        -: 1185:
        -: 1186:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1187:{
        -: 1188:  //Note: supplyPos is enum of choosen card
        -: 1189:
        -: 1190:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1191:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1192:    {
    #####: 1193:      return -1;
        -: 1194:    }
        -: 1195:
        -: 1196:  //added card for [whoseTurn] current player:
        -: 1197:  // toFlag = 0 : add to discard
        -: 1198:  // toFlag = 1 : add to deck
        -: 1199:  // toFlag = 2 : add to hand
        -: 1200:
    #####: 1201:  if (toFlag == 1)
        -: 1202:    {
    #####: 1203:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1204:      state->deckCount[player]++;
    #####: 1205:    }
    #####: 1206:  else if (toFlag == 2)
        -: 1207:    {
    #####: 1208:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1209:      state->handCount[player]++;
    #####: 1210:    }
        -: 1211:  else
        -: 1212:    {
    #####: 1213:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1214:      state->discardCount[player]++;
        -: 1215:    }
        -: 1216:
        -: 1217:  //decrease number in supply pile
    #####: 1218:  state->supplyCount[supplyPos]--;
        -: 1219:
    #####: 1220:  return 0;
    #####: 1221:}
        -: 1222:
        -: 1223:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1224:{
        -: 1225:  int i;
        -: 1226:
        -: 1227:  //reset coin count
        5: 1228:  state->coins = 0;
        -: 1229:
        -: 1230:  //add coins for each Treasure card in player's hand
       44: 1231:  for (i = 0; i < state->handCount[player]; i++)
        -: 1232:    {
       17: 1233:      if (state->hand[player][i] == copper)
        -: 1234:	{
        5: 1235:	  state->coins += 1;
        5: 1236:	}
       12: 1237:      else if (state->hand[player][i] == silver)
        -: 1238:	{
        1: 1239:	  state->coins += 2;
        1: 1240:	}
       11: 1241:      else if (state->hand[player][i] == gold)
        -: 1242:	{
        5: 1243:	  state->coins += 3;
        5: 1244:	}
       17: 1245:    }
        -: 1246:
        -: 1247:  //add bonus
        5: 1248:  state->coins += bonus;
        -: 1249:
        5: 1250:  return 0;
        -: 1251:}
        -: 1252:
        -: 1253:// card effects
        -: 1254:// adventurer card effect
        -: 1255:int adventurerEffect(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1256:    int drawntreasure = 0;
        -: 1257:    int cardDrawn;
        -: 1258:    int temphand[MAX_HAND];
    #####: 1259:    int temphandCounter = 0;
        -: 1260:
        -: 1261:    // keep drawing cards til get 2 treasure
        -: 1262:    // treasures are recorded in hand, while nontreasure are counted in temphand and not recorded in hand
    #####: 1263:    while (drawntreasure < 2) {
    #####: 1264:        drawCard(currentPlayer, state);
        -: 1265:
    #####: 1266:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1]; // top of hand is most recent draw
    #####: 1267:        if (cardDrawn == copper || cardDrawn == silver) {
    #####: 1268:            drawntreasure++;
    #####: 1269:        }
        -: 1270:        else {
    #####: 1271:            temphand[temphandCounter] = cardDrawn;
    #####: 1272:            state->handCount[currentPlayer]--; // not treasure; don't count as adding tot hand
    #####: 1273:            temphandCounter++;
        -: 1274:        }
        -: 1275:    }
        -: 1276:
        -: 1277:    // discard all cards that were recorded in temphand
    #####: 1278:    while (temphandCounter-1 >= 0) {
    #####: 1279:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter-1];
    #####: 1280:        temphandCounter--;
        -: 1281:    }
        -: 1282:
        -: 1283:    // discard this played card
    #####: 1284:    discardCard(handPos, currentPlayer, state, 0);
        -: 1285:
    #####: 1286:    return 0;
        -: 1287:}
        -: 1288:
        -: 1289:// smithy card effect
        -: 1290:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1291:    int i;
        -: 1292:
        -: 1293:    // draw 3 cards
       10: 1294:    for (i = 0; i < 4; i++) {
        4: 1295:        drawCard(currentPlayer, state);
        4: 1296:    }
        -: 1297:
        -: 1298:    // discard this played card
        1: 1299:    discardCard(handPos, currentPlayer, state, 0);
        -: 1300:
        1: 1301:    return 0;
        -: 1302:}
        -: 1303:
        -: 1304:// village card effect
        -: 1305:int villageEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1306:    // +1 card, +2 actions
    #####: 1307:    drawCard(currentPlayer, state);
    #####: 1308:    state->numActions = state->numBuys+2;
        -: 1309:
        -: 1310:    // discard this played card
    #####: 1311:    discardCard(handPos+1, currentPlayer, state, 0);
        -: 1312:
    #####: 1313:    return 0;
        -: 1314:}
        -: 1315:
        -: 1316:// council room effect
        -: 1317:int council_roomEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1318:    int i;
        -: 1319:    // +4 cards, +1 buy
    #####: 1320:    for (i = 0; i < 4; i++) {
    #####: 1321:        drawCard(currentPlayer, state);
    #####: 1322:    }
        -: 1323:
    #####: 1324:    state->numBuys++;
        -: 1325:
        -: 1326:    // +1 card for other players
    #####: 1327:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1328:        if (i != currentPlayer)
    #####: 1329:            drawCard(i, state);
    #####: 1330:    }
        -: 1331:
        -: 1332:    // discard this played card
    #####: 1333:    discardCard(handPos, currentPlayer, state, 0);
        -: 1334:
    #####: 1335:    return 0;
        -: 1336:}
        -: 1337:
        -: 1338:// remodel card effect
        -: 1339:int remodelEffect(struct gameState *state, int currentPlayer, int handPos, int trashChoice, int gainChoice) {
        -: 1340:    int i;
    #####: 1341:    int trashingCard = state->hand[currentPlayer][trashChoice];
        -: 1342:
        -: 1343:    // if trying to gain a card that costs more than +2 of trashed card, refuse action
    #####: 1344:    if (getCost(gainChoice)+2 > getCost(trashChoice))
    #####: 1345:        return -1;
        -: 1346:
        -: 1347:    // gain chosen card
    #####: 1348:    gainCard(gainChoice, state, 0, currentPlayer);
        -: 1349:
        -: 1350:    // discard card from hand
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:    return 0;
    #####: 1354:}
        -: 1355://end of dominion.c
        -: 1356:
cardtest2.c:

Card Test Suite for Village

** Test 1: function returns correct value **
Expected result: 0. Actual result: 0
TEST PASSED

** Test 2: player draws 1 card to hand and discards played card **
Expected hand size: 6. Actual hand size: 6
TEST PASSED

** Test 3: player draws 1 card from deck **
Expected deck size: 4. Actual deck size: 4
TEST PASSED

** Test 4: player discard pile now has played card **
Expected discard size: 1. Actual discard size: 0
TEST FAILED

** Test 5: player gains 2 actions **
Expected player action(s): 3. Actual action(s): 3
TEST PASSED

** Test 6: kingdom cards are not affected **
Kingdom card #7 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #13 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #10 expected count: 8. Actual count: 8
TEST PASSED
Kingdom card #19 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #8 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #21 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #11 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #22 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #14 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #25 expected count: 10. Actual count: 10
TEST PASSED

** Test 7: opponent state does not change **
Expected opponent hand size: 0. Actual hand size: 0
TEST PASSED
Expected opponent deck size: 10. Actual deck size: 10
TEST PASSED
Expected opponent discard size: 0. Actual discard size: 0
TEST PASSED
File 'cardtest2.c'
Lines executed:100.00% of 53
cardtest2.c:creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:25.94% of 640
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
       56:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       56:   11:  if (*(int*)a < *(int*)b)
       20:   12:    return -1;
       36:   13:  return 0;
       56:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        3:   23:  int* k = malloc(10 * sizeof(int));
        3:   24:  k[0] = k1;
        3:   25:  k[1] = k2;
        3:   26:  k[2] = k3;
        3:   27:  k[3] = k4;
        3:   28:  k[4] = k5;
        3:   29:  k[5] = k6;
        3:   30:  k[6] = k7;
        3:   31:  k[7] = k8;
        3:   32:  k[8] = k9;
        3:   33:  k[9] = k10;
        3:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        2:   44:  SelectStream(1);
        2:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        4:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      380:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      200:   65:        }
       20:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        2:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        2:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        2:  115:		  if (numPlayers == 2){
        2:  116:		    state->supplyCount[i] = 8;
        2:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        2:  119:		}
        -:  120:	      else
        -:  121:		{
       18:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      290:  130:	}
        -:  131:
       40:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       12:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        4:  140:      state->deckCount[i] = 0;
       32:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       12:  143:	  state->deck[i][j] = estate;
       12:  144:	  state->deckCount[i]++;
       12:  145:	}
       64:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       28:  148:	  state->deck[i][j] = copper;
       28:  149:	  state->deckCount[i]++;
       28:  150:	}
        4:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       12:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        4:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        4:  160:    }
        -:  161:
        -:  162:  //draw player hands
       12:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        4:  166:      state->handCount[i] = 0;
        4:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        4:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
       54:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
       10:  193:    drawCard(state->whoseTurn, state);
       10:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        2:  198:  return 0;
        2:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        4:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       88:  214:  while (state->deckCount[player] > 0) {
       40:  215:    card = floor(Random() * state->deckCount[player]);
       40:  216:    newDeck[newDeckPos] = state->deck[player][card];
       40:  217:    newDeckPos++;
      228:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       74:  219:      state->deck[player][i] = state->deck[player][i+1];
       74:  220:    }
       40:  221:    state->deckCount[player]--;
        -:  222:  }
       88:  223:  for (i = 0; i < newDeckPos; i++) {
       40:  224:    state->deck[player][i] = newDeck[i];
       40:  225:    state->deckCount[player]++;
       40:  226:  }
        -:  227:
        4:  228:  return 0;
        4:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        3:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        5:  406:	  j++;
        5:  407:	}
      100:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        5:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       15:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       15:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       15:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  576:    state->deckCount[player]--;
       15:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       15:  580:  return 0;
       15:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        2:  653:  int currentPlayer = whoseTurn(state);
        2:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        2:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        2:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        2:  660:  int z = 0;// this is the counter for the temp hand
        2:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
        2:  667:  switch( card )
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        return adventurerEffect(state, currentPlayer, handPos);
        -:  671:
        -:  672:    case council_room:
    #####:  673:        return council_roomEffect(state, currentPlayer, handPos);
        -:  674:
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:
    #####:  726:      return 0;
        -:  727:
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:
    #####:  764:      return 0;
        -:  765:
        -:  766:    case remodel:
    #####:  767:        return remodelEffect(state, currentPlayer, handPos, choice1, choice2);
        -:  768:
        -:  769:    case smithy:
        1:  770:        return smithyEffect(state, currentPlayer, handPos);
        -:  771:
        -:  772:    case village:
        1:  773:        return villageEffect(state, currentPlayer, handPos);
        -:  774:
        -:  775:    case baron:
    #####:  776:      state->numBuys++;//Increase buys by 1!
    #####:  777:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  778:	int p = 0;//Iterator for hand!
    #####:  779:	int card_not_discarded = 1;//Flag for discard set!
    #####:  780:	while(card_not_discarded){
    #####:  781:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  782:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  783:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  784:	    state->discardCount[currentPlayer]++;
    #####:  785:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  786:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  787:	    }
    #####:  788:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  789:	    state->handCount[currentPlayer]--;
    #####:  790:	    card_not_discarded = 0;//Exit the loop
    #####:  791:	  }
    #####:  792:	  else if (p > state->handCount[currentPlayer]){
        -:  793:	    if(DEBUG) {
        -:  794:	      printf("No estate cards in your hand, invalid choice\n");
        -:  795:	      printf("Must gain an estate if there are any\n");
        -:  796:	    }
    #####:  797:	    if (supplyCount(estate, state) > 0){
    #####:  798:	      gainCard(estate, state, 0, currentPlayer);
    #####:  799:	      state->supplyCount[estate]--;//Decrement estates
    #####:  800:	      if (supplyCount(estate, state) == 0){
    #####:  801:		isGameOver(state);
    #####:  802:	      }
    #####:  803:	    }
    #####:  804:	    card_not_discarded = 0;//Exit the loop
    #####:  805:	  }
        -:  806:
        -:  807:	  else{
    #####:  808:	    p++;//Next card
        -:  809:	  }
        -:  810:	}
    #####:  811:      }
        -:  812:
        -:  813:      else{
    #####:  814:	if (supplyCount(estate, state) > 0){
    #####:  815:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  816:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  817:	  if (supplyCount(estate, state) == 0){
    #####:  818:	    isGameOver(state);
    #####:  819:	  }
    #####:  820:	}
        -:  821:      }
        -:  822:
        -:  823:
    #####:  824:      return 0;
        -:  825:
        -:  826:    case great_hall:
        -:  827:      //+1 Card
    #####:  828:      drawCard(currentPlayer, state);
        -:  829:
        -:  830:      //+1 Actions
    #####:  831:      state->numActions++;
        -:  832:
        -:  833:      //discard card from hand
    #####:  834:      discardCard(handPos, currentPlayer, state, 0);
    #####:  835:      return 0;
        -:  836:
        -:  837:    case minion:
        -:  838:      //+1 action
    #####:  839:      state->numActions++;
        -:  840:
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
        -:  843:
    #####:  844:      if (choice1)		//+2 coins
        -:  845:	{
    #####:  846:	  state->coins = state->coins + 2;
    #####:  847:	}
        -:  848:
    #####:  849:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  850:	{
        -:  851:	  //discard hand
    #####:  852:	  while(numHandCards(state) > 0)
        -:  853:	    {
    #####:  854:	      discardCard(handPos, currentPlayer, state, 0);
        -:  855:	    }
        -:  856:
        -:  857:	  //draw 4
    #####:  858:	  for (i = 0; i < 4; i++)
        -:  859:	    {
    #####:  860:	      drawCard(currentPlayer, state);
    #####:  861:	    }
        -:  862:
        -:  863:	  //other players discard hand and redraw if hand size > 4
    #####:  864:	  for (i = 0; i < state->numPlayers; i++)
        -:  865:	    {
    #####:  866:	      if (i != currentPlayer)
        -:  867:		{
    #####:  868:		  if ( state->handCount[i] > 4 )
        -:  869:		    {
        -:  870:		      //discard hand
    #####:  871:		      while( state->handCount[i] > 0 )
        -:  872:			{
    #####:  873:			  discardCard(handPos, i, state, 0);
        -:  874:			}
        -:  875:
        -:  876:		      //draw 4
    #####:  877:		      for (j = 0; j < 4; j++)
        -:  878:			{
    #####:  879:			  drawCard(i, state);
    #####:  880:			}
    #####:  881:		    }
    #####:  882:		}
    #####:  883:	    }
        -:  884:
    #####:  885:	}
    #####:  886:      return 0;
        -:  887:
        -:  888:    case steward:
    #####:  889:      if (choice1 == 1)
        -:  890:	{
        -:  891:	  //+2 cards
    #####:  892:	  drawCard(currentPlayer, state);
    #####:  893:	  drawCard(currentPlayer, state);
    #####:  894:	}
    #####:  895:      else if (choice1 == 2)
        -:  896:	{
        -:  897:	  //+2 coins
    #####:  898:	  state->coins = state->coins + 2;
    #####:  899:	}
        -:  900:      else
        -:  901:	{
        -:  902:	  //trash 2 cards in hand
    #####:  903:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  904:	  discardCard(choice3, currentPlayer, state, 1);
        -:  905:	}
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
    #####:  909:      return 0;
        -:  910:
        -:  911:    case tribute:
    #####:  912:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  913:	if (state->deckCount[nextPlayer] > 0){
    #####:  914:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:	  state->deckCount[nextPlayer]--;
    #####:  916:	}
    #####:  917:	else if (state->discardCount[nextPlayer] > 0){
    #####:  918:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  919:	  state->discardCount[nextPlayer]--;
    #####:  920:	}
        -:  921:	else{
        -:  922:	  //No Card to Reveal
        -:  923:	  if (DEBUG){
        -:  924:	    printf("No cards to reveal\n");
        -:  925:	  }
        -:  926:	}
    #####:  927:      }
        -:  928:
        -:  929:      else{
    #####:  930:	if (state->deckCount[nextPlayer] == 0){
    #####:  931:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  932:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  933:	    state->deckCount[nextPlayer]++;
    #####:  934:	    state->discard[nextPlayer][i] = -1;
    #####:  935:	    state->discardCount[nextPlayer]--;
    #####:  936:	  }
        -:  937:
    #####:  938:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  939:	}
    #####:  940:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
    #####:  943:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  945:	state->deckCount[nextPlayer]--;
        -:  946:      }
        -:  947:
    #####:  948:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  949:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  950:	state->playedCardCount++;
    #####:  951:	tributeRevealedCards[1] = -1;
    #####:  952:      }
        -:  953:
    #####:  954:      for (i = 0; i <= 2; i ++){
    #####:  955:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  956:	  state->coins += 2;
    #####:  957:	}
        -:  958:
    #####:  959:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  960:	  drawCard(currentPlayer, state);
    #####:  961:	  drawCard(currentPlayer, state);
    #####:  962:	}
        -:  963:	else{//Action Card
    #####:  964:	  state->numActions = state->numActions + 2;
        -:  965:	}
    #####:  966:      }
        -:  967:
    #####:  968:      return 0;
        -:  969:
        -:  970:    case ambassador:
    #####:  971:      j = 0;		//used to check if player has enough cards to discard
        -:  972:
    #####:  973:      if (choice2 > 2 || choice2 < 0)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      if (choice1 == handPos)
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  984:	{
    #####:  985:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  986:	    {
    #####:  987:	      j++;
    #####:  988:	    }
    #####:  989:	}
    #####:  990:      if (j < choice2)
        -:  991:	{
    #####:  992:	  return -1;
        -:  993:	}
        -:  994:
        -:  995:      if (DEBUG)
        -:  996:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  997:
        -:  998:      //increase supply count for choosen card by amount being discarded
    #####:  999:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1000:
        -: 1001:      //each other player gains a copy of revealed card
    #####: 1002:      for (i = 0; i < state->numPlayers; i++)
        -: 1003:	{
    #####: 1004:	  if (i != currentPlayer)
        -: 1005:	    {
    #####: 1006:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1007:	    }
    #####: 1008:	}
        -: 1009:
        -: 1010:      //discard played card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:
        -: 1013:      //trash copies of cards returned to supply
    #####: 1014:      for (j = 0; j < choice2; j++)
        -: 1015:	{
    #####: 1016:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1017:	    {
    #####: 1018:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1019:		{
    #####: 1020:		  discardCard(i, currentPlayer, state, 1);
    #####: 1021:		  break;
        -: 1022:		}
    #####: 1023:	    }
    #####: 1024:	}
        -: 1025:
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case cutpurse:
        -: 1029:
    #####: 1030:      updateCoins(currentPlayer, state, 2);
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
        -: 1034:	    {
    #####: 1035:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1036:		{
    #####: 1037:		  if (state->hand[i][j] == copper)
        -: 1038:		    {
    #####: 1039:		      discardCard(j, i, state, 0);
    #####: 1040:		      break;
        -: 1041:		    }
    #####: 1042:		  if (j == state->handCount[i])
        -: 1043:		    {
    #####: 1044:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1045:			{
        -: 1046:			  if (DEBUG)
        -: 1047:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1048:			}
    #####: 1049:		      break;
        -: 1050:		    }
    #####: 1051:		}
        -: 1052:
    #####: 1053:	    }
        -: 1054:
    #####: 1055:	}
        -: 1056:
        -: 1057:      //discard played card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
        -: 1059:
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:
        -: 1063:    case embargo:
        -: 1064:      //+2 Coins
    #####: 1065:      state->coins = state->coins + 2;
        -: 1066:
        -: 1067:      //see if selected pile is in play
    #####: 1068:      if ( state->supplyCount[choice1] == -1 )
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:
        -: 1073:      //add embargo token to selected supply pile
    #####: 1074:      state->embargoTokens[choice1]++;
        -: 1075:
        -: 1076:      //trash card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:    case outpost:
        -: 1081:      //set outpost flag
    #####: 1082:      state->outpostPlayed++;
        -: 1083:
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1086:      return 0;
        -: 1087:
        -: 1088:    case salvager:
        -: 1089:      //+1 buy
    #####: 1090:      state->numBuys++;
        -: 1091:
    #####: 1092:      if (choice1)
        -: 1093:	{
        -: 1094:	  //gain coins equal to trashed card
    #####: 1095:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1096:	  //trash card
    #####: 1097:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1098:	}
        -: 1099:
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:
        -: 1104:    case sea_hag:
    #####: 1105:      for (i = 0; i < state->numPlayers; i++){
    #####: 1106:	if (i != currentPlayer){
    #####: 1107:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1108:	  state->discardCount[i]++;
    #####: 1109:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1110:	}
    #####: 1111:      }
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case treasure_map:
        -: 1115:      //search hand for another treasure_map
    #####: 1116:      index = -1;
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1118:	{
    #####: 1119:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1120:	    {
    #####: 1121:	      index = i;
    #####: 1122:	      break;
        -: 1123:	    }
    #####: 1124:	}
    #####: 1125:      if (index > -1)
        -: 1126:	{
        -: 1127:	  //trash both treasure cards
    #####: 1128:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1129:	  discardCard(index, currentPlayer, state, 1);
        -: 1130:
        -: 1131:	  //gain 4 Gold cards
    #####: 1132:	  for (i = 0; i < 4; i++)
        -: 1133:	    {
    #####: 1134:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1135:	    }
        -: 1136:
        -: 1137:	  //return success
    #####: 1138:	  return 1;
        -: 1139:	}
        -: 1140:
        -: 1141:      //no second treasure_map found in hand
    #####: 1142:      return -1;
        -: 1143:    }
        -: 1144:
    #####: 1145:  return -1;
        2: 1146:}
        -: 1147:
        -: 1148:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1149:{
        -: 1150:
        -: 1151:  //if card is not trashed, added to Played pile
        2: 1152:  if (trashFlag < 1)
        -: 1153:    {
        -: 1154:      //add card to played pile
        2: 1155:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1156:      state->playedCardCount++;
        2: 1157:    }
        -: 1158:
        -: 1159:  //set played card to -1
        2: 1160:  state->hand[currentPlayer][handPos] = -1;
        -: 1161:
        -: 1162:  //remove card from player's hand
        2: 1163:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1164:    {
        -: 1165:      //reduce number of cards in hand
    #####: 1166:      state->handCount[currentPlayer]--;
    #####: 1167:    }
        2: 1168:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1169:    {
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
    #####: 1172:    }
        -: 1173:  else
        -: 1174:    {
        -: 1175:      //replace discarded card with last card in hand
        2: 1176:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1177:      //set last card to -1
        2: 1178:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1179:      //reduce number of cards in hand
        2: 1180:      state->handCount[currentPlayer]--;
        -: 1181:    }
        -: 1182:
        2: 1183:  return 0;
        -: 1184:}
        -: 1185:
        -: 1186:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1187:{
        -: 1188:  //Note: supplyPos is enum of choosen card
        -: 1189:
        -: 1190:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1191:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1192:    {
    #####: 1193:      return -1;
        -: 1194:    }
        -: 1195:
        -: 1196:  //added card for [whoseTurn] current player:
        -: 1197:  // toFlag = 0 : add to discard
        -: 1198:  // toFlag = 1 : add to deck
        -: 1199:  // toFlag = 2 : add to hand
        -: 1200:
    #####: 1201:  if (toFlag == 1)
        -: 1202:    {
    #####: 1203:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1204:      state->deckCount[player]++;
    #####: 1205:    }
    #####: 1206:  else if (toFlag == 2)
        -: 1207:    {
    #####: 1208:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1209:      state->handCount[player]++;
    #####: 1210:    }
        -: 1211:  else
        -: 1212:    {
    #####: 1213:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1214:      state->discardCount[player]++;
        -: 1215:    }
        -: 1216:
        -: 1217:  //decrease number in supply pile
    #####: 1218:  state->supplyCount[supplyPos]--;
        -: 1219:
    #####: 1220:  return 0;
    #####: 1221:}
        -: 1222:
        -: 1223:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1224:{
        -: 1225:  int i;
        -: 1226:
        -: 1227:  //reset coin count
        6: 1228:  state->coins = 0;
        -: 1229:
        -: 1230:  //add coins for each Treasure card in player's hand
       56: 1231:  for (i = 0; i < state->handCount[player]; i++)
        -: 1232:    {
       22: 1233:      if (state->hand[player][i] == copper)
        -: 1234:	{
        9: 1235:	  state->coins += 1;
        9: 1236:	}
       13: 1237:      else if (state->hand[player][i] == silver)
        -: 1238:	{
        1: 1239:	  state->coins += 2;
        1: 1240:	}
       12: 1241:      else if (state->hand[player][i] == gold)
        -: 1242:	{
        5: 1243:	  state->coins += 3;
        5: 1244:	}
       22: 1245:    }
        -: 1246:
        -: 1247:  //add bonus
        6: 1248:  state->coins += bonus;
        -: 1249:
        6: 1250:  return 0;
        -: 1251:}
        -: 1252:
        -: 1253:// card effects
        -: 1254:// adventurer card effect
        -: 1255:int adventurerEffect(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1256:    int drawntreasure = 0;
        -: 1257:    int cardDrawn;
        -: 1258:    int temphand[MAX_HAND];
    #####: 1259:    int temphandCounter = 0;
        -: 1260:
        -: 1261:    // keep drawing cards til get 2 treasure
        -: 1262:    // treasures are recorded in hand, while nontreasure are counted in temphand and not recorded in hand
    #####: 1263:    while (drawntreasure < 2) {
    #####: 1264:        drawCard(currentPlayer, state);
        -: 1265:
    #####: 1266:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1]; // top of hand is most recent draw
    #####: 1267:        if (cardDrawn == copper || cardDrawn == silver) {
    #####: 1268:            drawntreasure++;
    #####: 1269:        }
        -: 1270:        else {
    #####: 1271:            temphand[temphandCounter] = cardDrawn;
    #####: 1272:            state->handCount[currentPlayer]--; // not treasure; don't count as adding tot hand
    #####: 1273:            temphandCounter++;
        -: 1274:        }
        -: 1275:    }
        -: 1276:
        -: 1277:    // discard all cards that were recorded in temphand
    #####: 1278:    while (temphandCounter-1 >= 0) {
    #####: 1279:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter-1];
    #####: 1280:        temphandCounter--;
        -: 1281:    }
        -: 1282:
        -: 1283:    // discard this played card
    #####: 1284:    discardCard(handPos, currentPlayer, state, 0);
        -: 1285:
    #####: 1286:    return 0;
        -: 1287:}
        -: 1288:
        -: 1289:// smithy card effect
        -: 1290:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1291:    int i;
        -: 1292:
        -: 1293:    // draw 3 cards
       10: 1294:    for (i = 0; i < 4; i++) {
        4: 1295:        drawCard(currentPlayer, state);
        4: 1296:    }
        -: 1297:
        -: 1298:    // discard this played card
        1: 1299:    discardCard(handPos, currentPlayer, state, 0);
        -: 1300:
        1: 1301:    return 0;
        -: 1302:}
        -: 1303:
        -: 1304:// village card effect
        -: 1305:int villageEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1306:    // +1 card, +2 actions
        1: 1307:    drawCard(currentPlayer, state);
        1: 1308:    state->numActions = state->numBuys+2;
        -: 1309:
        -: 1310:    // discard this played card
        1: 1311:    discardCard(handPos+1, currentPlayer, state, 0);
        -: 1312:
        1: 1313:    return 0;
        -: 1314:}
        -: 1315:
        -: 1316:// council room effect
        -: 1317:int council_roomEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1318:    int i;
        -: 1319:    // +4 cards, +1 buy
    #####: 1320:    for (i = 0; i < 4; i++) {
    #####: 1321:        drawCard(currentPlayer, state);
    #####: 1322:    }
        -: 1323:
    #####: 1324:    state->numBuys++;
        -: 1325:
        -: 1326:    // +1 card for other players
    #####: 1327:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1328:        if (i != currentPlayer)
    #####: 1329:            drawCard(i, state);
    #####: 1330:    }
        -: 1331:
        -: 1332:    // discard this played card
    #####: 1333:    discardCard(handPos, currentPlayer, state, 0);
        -: 1334:
    #####: 1335:    return 0;
        -: 1336:}
        -: 1337:
        -: 1338:// remodel card effect
        -: 1339:int remodelEffect(struct gameState *state, int currentPlayer, int handPos, int trashChoice, int gainChoice) {
        -: 1340:    int i;
    #####: 1341:    int trashingCard = state->hand[currentPlayer][trashChoice];
        -: 1342:
        -: 1343:    // if trying to gain a card that costs more than +2 of trashed card, refuse action
    #####: 1344:    if (getCost(gainChoice)+2 > getCost(trashChoice))
    #####: 1345:        return -1;
        -: 1346:
        -: 1347:    // gain chosen card
    #####: 1348:    gainCard(gainChoice, state, 0, currentPlayer);
        -: 1349:
        -: 1350:    // discard card from hand
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:    return 0;
    #####: 1354:}
        -: 1355://end of dominion.c
        -: 1356:
cardtest3.c:

Card Test Suite for Council Room

** Test 1: function returns correct value **
Expected result: 0. Actual result: 0
TEST PASSED

** Test 2: player draws 4 card to hand and discards played card **
Expected hand size: 9. Actual hand size: 9
TEST PASSED

** Test 3: player draws 4 card from deck **
Expected deck size: 1. Actual deck size: 1
TEST PASSED

** Test 4: player discard pile now has played card **
Expected discard size: 1. Actual discard size: 0
TEST FAILED

** Test 5: player gains a buy **
Expected player buy(s): 2. Actual buy(s): 2
TEST PASSED

** Test 6: kingdom cards are not affected **
Kingdom card #7 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #13 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #10 expected count: 8. Actual count: 8
TEST PASSED
Kingdom card #19 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #8 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #21 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #11 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #22 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #14 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #25 expected count: 10. Actual count: 10
TEST PASSED

** Test 7: opponent draws a card and state changes **
Expected opponent hand size: 1. Actual hand size: 1
TEST PASSED
Expected opponent deck size: 9. Actual deck size: 9
TEST PASSED

** Test 8: opponent does not discard any card **
Expected opponent discard size: 0. Actual discard size: 0
TEST PASSED
File 'cardtest3.c'
Lines executed:100.00% of 54
cardtest3.c:creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:27.66% of 640
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
       84:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       84:   11:  if (*(int*)a < *(int*)b)
       30:   12:    return -1;
       54:   13:  return 0;
       84:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        4:   23:  int* k = malloc(10 * sizeof(int));
        4:   24:  k[0] = k1;
        4:   25:  k[1] = k2;
        4:   26:  k[2] = k3;
        4:   27:  k[3] = k4;
        4:   28:  k[4] = k5;
        4:   29:  k[5] = k6;
        4:   30:  k[6] = k7;
        4:   31:  k[7] = k8;
        4:   32:  k[8] = k9;
        4:   33:  k[9] = k10;
        4:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
        3:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      570:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      300:   65:        }
       30:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        3:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        3:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        3:  115:		  if (numPlayers == 2){
        3:  116:		    state->supplyCount[i] = 8;
        3:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        3:  119:		}
        -:  120:	      else
        -:  121:		{
       27:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      435:  130:	}
        -:  131:
       60:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        6:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       18:  143:	  state->deck[i][j] = estate;
       18:  144:	  state->deckCount[i]++;
       18:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       42:  148:	  state->deck[i][j] = copper;
       42:  149:	  state->deckCount[i]++;
       42:  150:	}
        6:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        6:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        6:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        6:  166:      state->handCount[i] = 0;
        6:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        6:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
       81:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
       15:  193:    drawCard(state->whoseTurn, state);
       15:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        3:  198:  return 0;
        3:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        6:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        6:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        6:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      132:  214:  while (state->deckCount[player] > 0) {
       60:  215:    card = floor(Random() * state->deckCount[player]);
       60:  216:    newDeck[newDeckPos] = state->deck[player][card];
       60:  217:    newDeckPos++;
      342:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      111:  219:      state->deck[player][i] = state->deck[player][i+1];
      111:  220:    }
       60:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
       60:  224:    state->deck[player][i] = newDeck[i];
       60:  225:    state->deckCount[player]++;
       60:  226:  }
        -:  227:
        6:  228:  return 0;
        6:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        5:  406:	  j++;
        5:  407:	}
      100:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        5:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       25:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       25:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       25:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       25:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       25:  576:    state->deckCount[player]--;
       25:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       25:  580:  return 0;
       25:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        3:  653:  int currentPlayer = whoseTurn(state);
        3:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        3:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        3:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        3:  660:  int z = 0;// this is the counter for the temp hand
        3:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
        3:  667:  switch( card )
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        return adventurerEffect(state, currentPlayer, handPos);
        -:  671:
        -:  672:    case council_room:
        1:  673:        return council_roomEffect(state, currentPlayer, handPos);
        -:  674:
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:
    #####:  726:      return 0;
        -:  727:
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:
    #####:  764:      return 0;
        -:  765:
        -:  766:    case remodel:
    #####:  767:        return remodelEffect(state, currentPlayer, handPos, choice1, choice2);
        -:  768:
        -:  769:    case smithy:
        1:  770:        return smithyEffect(state, currentPlayer, handPos);
        -:  771:
        -:  772:    case village:
        1:  773:        return villageEffect(state, currentPlayer, handPos);
        -:  774:
        -:  775:    case baron:
    #####:  776:      state->numBuys++;//Increase buys by 1!
    #####:  777:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  778:	int p = 0;//Iterator for hand!
    #####:  779:	int card_not_discarded = 1;//Flag for discard set!
    #####:  780:	while(card_not_discarded){
    #####:  781:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  782:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  783:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  784:	    state->discardCount[currentPlayer]++;
    #####:  785:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  786:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  787:	    }
    #####:  788:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  789:	    state->handCount[currentPlayer]--;
    #####:  790:	    card_not_discarded = 0;//Exit the loop
    #####:  791:	  }
    #####:  792:	  else if (p > state->handCount[currentPlayer]){
        -:  793:	    if(DEBUG) {
        -:  794:	      printf("No estate cards in your hand, invalid choice\n");
        -:  795:	      printf("Must gain an estate if there are any\n");
        -:  796:	    }
    #####:  797:	    if (supplyCount(estate, state) > 0){
    #####:  798:	      gainCard(estate, state, 0, currentPlayer);
    #####:  799:	      state->supplyCount[estate]--;//Decrement estates
    #####:  800:	      if (supplyCount(estate, state) == 0){
    #####:  801:		isGameOver(state);
    #####:  802:	      }
    #####:  803:	    }
    #####:  804:	    card_not_discarded = 0;//Exit the loop
    #####:  805:	  }
        -:  806:
        -:  807:	  else{
    #####:  808:	    p++;//Next card
        -:  809:	  }
        -:  810:	}
    #####:  811:      }
        -:  812:
        -:  813:      else{
    #####:  814:	if (supplyCount(estate, state) > 0){
    #####:  815:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  816:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  817:	  if (supplyCount(estate, state) == 0){
    #####:  818:	    isGameOver(state);
    #####:  819:	  }
    #####:  820:	}
        -:  821:      }
        -:  822:
        -:  823:
    #####:  824:      return 0;
        -:  825:
        -:  826:    case great_hall:
        -:  827:      //+1 Card
    #####:  828:      drawCard(currentPlayer, state);
        -:  829:
        -:  830:      //+1 Actions
    #####:  831:      state->numActions++;
        -:  832:
        -:  833:      //discard card from hand
    #####:  834:      discardCard(handPos, currentPlayer, state, 0);
    #####:  835:      return 0;
        -:  836:
        -:  837:    case minion:
        -:  838:      //+1 action
    #####:  839:      state->numActions++;
        -:  840:
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
        -:  843:
    #####:  844:      if (choice1)		//+2 coins
        -:  845:	{
    #####:  846:	  state->coins = state->coins + 2;
    #####:  847:	}
        -:  848:
    #####:  849:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  850:	{
        -:  851:	  //discard hand
    #####:  852:	  while(numHandCards(state) > 0)
        -:  853:	    {
    #####:  854:	      discardCard(handPos, currentPlayer, state, 0);
        -:  855:	    }
        -:  856:
        -:  857:	  //draw 4
    #####:  858:	  for (i = 0; i < 4; i++)
        -:  859:	    {
    #####:  860:	      drawCard(currentPlayer, state);
    #####:  861:	    }
        -:  862:
        -:  863:	  //other players discard hand and redraw if hand size > 4
    #####:  864:	  for (i = 0; i < state->numPlayers; i++)
        -:  865:	    {
    #####:  866:	      if (i != currentPlayer)
        -:  867:		{
    #####:  868:		  if ( state->handCount[i] > 4 )
        -:  869:		    {
        -:  870:		      //discard hand
    #####:  871:		      while( state->handCount[i] > 0 )
        -:  872:			{
    #####:  873:			  discardCard(handPos, i, state, 0);
        -:  874:			}
        -:  875:
        -:  876:		      //draw 4
    #####:  877:		      for (j = 0; j < 4; j++)
        -:  878:			{
    #####:  879:			  drawCard(i, state);
    #####:  880:			}
    #####:  881:		    }
    #####:  882:		}
    #####:  883:	    }
        -:  884:
    #####:  885:	}
    #####:  886:      return 0;
        -:  887:
        -:  888:    case steward:
    #####:  889:      if (choice1 == 1)
        -:  890:	{
        -:  891:	  //+2 cards
    #####:  892:	  drawCard(currentPlayer, state);
    #####:  893:	  drawCard(currentPlayer, state);
    #####:  894:	}
    #####:  895:      else if (choice1 == 2)
        -:  896:	{
        -:  897:	  //+2 coins
    #####:  898:	  state->coins = state->coins + 2;
    #####:  899:	}
        -:  900:      else
        -:  901:	{
        -:  902:	  //trash 2 cards in hand
    #####:  903:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  904:	  discardCard(choice3, currentPlayer, state, 1);
        -:  905:	}
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
    #####:  909:      return 0;
        -:  910:
        -:  911:    case tribute:
    #####:  912:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  913:	if (state->deckCount[nextPlayer] > 0){
    #####:  914:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:	  state->deckCount[nextPlayer]--;
    #####:  916:	}
    #####:  917:	else if (state->discardCount[nextPlayer] > 0){
    #####:  918:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  919:	  state->discardCount[nextPlayer]--;
    #####:  920:	}
        -:  921:	else{
        -:  922:	  //No Card to Reveal
        -:  923:	  if (DEBUG){
        -:  924:	    printf("No cards to reveal\n");
        -:  925:	  }
        -:  926:	}
    #####:  927:      }
        -:  928:
        -:  929:      else{
    #####:  930:	if (state->deckCount[nextPlayer] == 0){
    #####:  931:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  932:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  933:	    state->deckCount[nextPlayer]++;
    #####:  934:	    state->discard[nextPlayer][i] = -1;
    #####:  935:	    state->discardCount[nextPlayer]--;
    #####:  936:	  }
        -:  937:
    #####:  938:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  939:	}
    #####:  940:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
    #####:  943:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  945:	state->deckCount[nextPlayer]--;
        -:  946:      }
        -:  947:
    #####:  948:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  949:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  950:	state->playedCardCount++;
    #####:  951:	tributeRevealedCards[1] = -1;
    #####:  952:      }
        -:  953:
    #####:  954:      for (i = 0; i <= 2; i ++){
    #####:  955:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  956:	  state->coins += 2;
    #####:  957:	}
        -:  958:
    #####:  959:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  960:	  drawCard(currentPlayer, state);
    #####:  961:	  drawCard(currentPlayer, state);
    #####:  962:	}
        -:  963:	else{//Action Card
    #####:  964:	  state->numActions = state->numActions + 2;
        -:  965:	}
    #####:  966:      }
        -:  967:
    #####:  968:      return 0;
        -:  969:
        -:  970:    case ambassador:
    #####:  971:      j = 0;		//used to check if player has enough cards to discard
        -:  972:
    #####:  973:      if (choice2 > 2 || choice2 < 0)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      if (choice1 == handPos)
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  984:	{
    #####:  985:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  986:	    {
    #####:  987:	      j++;
    #####:  988:	    }
    #####:  989:	}
    #####:  990:      if (j < choice2)
        -:  991:	{
    #####:  992:	  return -1;
        -:  993:	}
        -:  994:
        -:  995:      if (DEBUG)
        -:  996:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  997:
        -:  998:      //increase supply count for choosen card by amount being discarded
    #####:  999:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1000:
        -: 1001:      //each other player gains a copy of revealed card
    #####: 1002:      for (i = 0; i < state->numPlayers; i++)
        -: 1003:	{
    #####: 1004:	  if (i != currentPlayer)
        -: 1005:	    {
    #####: 1006:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1007:	    }
    #####: 1008:	}
        -: 1009:
        -: 1010:      //discard played card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:
        -: 1013:      //trash copies of cards returned to supply
    #####: 1014:      for (j = 0; j < choice2; j++)
        -: 1015:	{
    #####: 1016:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1017:	    {
    #####: 1018:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1019:		{
    #####: 1020:		  discardCard(i, currentPlayer, state, 1);
    #####: 1021:		  break;
        -: 1022:		}
    #####: 1023:	    }
    #####: 1024:	}
        -: 1025:
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case cutpurse:
        -: 1029:
    #####: 1030:      updateCoins(currentPlayer, state, 2);
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
        -: 1034:	    {
    #####: 1035:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1036:		{
    #####: 1037:		  if (state->hand[i][j] == copper)
        -: 1038:		    {
    #####: 1039:		      discardCard(j, i, state, 0);
    #####: 1040:		      break;
        -: 1041:		    }
    #####: 1042:		  if (j == state->handCount[i])
        -: 1043:		    {
    #####: 1044:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1045:			{
        -: 1046:			  if (DEBUG)
        -: 1047:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1048:			}
    #####: 1049:		      break;
        -: 1050:		    }
    #####: 1051:		}
        -: 1052:
    #####: 1053:	    }
        -: 1054:
    #####: 1055:	}
        -: 1056:
        -: 1057:      //discard played card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
        -: 1059:
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:
        -: 1063:    case embargo:
        -: 1064:      //+2 Coins
    #####: 1065:      state->coins = state->coins + 2;
        -: 1066:
        -: 1067:      //see if selected pile is in play
    #####: 1068:      if ( state->supplyCount[choice1] == -1 )
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:
        -: 1073:      //add embargo token to selected supply pile
    #####: 1074:      state->embargoTokens[choice1]++;
        -: 1075:
        -: 1076:      //trash card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:    case outpost:
        -: 1081:      //set outpost flag
    #####: 1082:      state->outpostPlayed++;
        -: 1083:
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1086:      return 0;
        -: 1087:
        -: 1088:    case salvager:
        -: 1089:      //+1 buy
    #####: 1090:      state->numBuys++;
        -: 1091:
    #####: 1092:      if (choice1)
        -: 1093:	{
        -: 1094:	  //gain coins equal to trashed card
    #####: 1095:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1096:	  //trash card
    #####: 1097:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1098:	}
        -: 1099:
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:
        -: 1104:    case sea_hag:
    #####: 1105:      for (i = 0; i < state->numPlayers; i++){
    #####: 1106:	if (i != currentPlayer){
    #####: 1107:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1108:	  state->discardCount[i]++;
    #####: 1109:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1110:	}
    #####: 1111:      }
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case treasure_map:
        -: 1115:      //search hand for another treasure_map
    #####: 1116:      index = -1;
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1118:	{
    #####: 1119:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1120:	    {
    #####: 1121:	      index = i;
    #####: 1122:	      break;
        -: 1123:	    }
    #####: 1124:	}
    #####: 1125:      if (index > -1)
        -: 1126:	{
        -: 1127:	  //trash both treasure cards
    #####: 1128:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1129:	  discardCard(index, currentPlayer, state, 1);
        -: 1130:
        -: 1131:	  //gain 4 Gold cards
    #####: 1132:	  for (i = 0; i < 4; i++)
        -: 1133:	    {
    #####: 1134:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1135:	    }
        -: 1136:
        -: 1137:	  //return success
    #####: 1138:	  return 1;
        -: 1139:	}
        -: 1140:
        -: 1141:      //no second treasure_map found in hand
    #####: 1142:      return -1;
        -: 1143:    }
        -: 1144:
    #####: 1145:  return -1;
        3: 1146:}
        -: 1147:
        -: 1148:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1149:{
        -: 1150:
        -: 1151:  //if card is not trashed, added to Played pile
        3: 1152:  if (trashFlag < 1)
        -: 1153:    {
        -: 1154:      //add card to played pile
        3: 1155:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        3: 1156:      state->playedCardCount++;
        3: 1157:    }
        -: 1158:
        -: 1159:  //set played card to -1
        3: 1160:  state->hand[currentPlayer][handPos] = -1;
        -: 1161:
        -: 1162:  //remove card from player's hand
        3: 1163:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1164:    {
        -: 1165:      //reduce number of cards in hand
    #####: 1166:      state->handCount[currentPlayer]--;
    #####: 1167:    }
        3: 1168:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1169:    {
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
    #####: 1172:    }
        -: 1173:  else
        -: 1174:    {
        -: 1175:      //replace discarded card with last card in hand
        3: 1176:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1177:      //set last card to -1
        3: 1178:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1179:      //reduce number of cards in hand
        3: 1180:      state->handCount[currentPlayer]--;
        -: 1181:    }
        -: 1182:
        3: 1183:  return 0;
        -: 1184:}
        -: 1185:
        -: 1186:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1187:{
        -: 1188:  //Note: supplyPos is enum of choosen card
        -: 1189:
        -: 1190:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1191:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1192:    {
    #####: 1193:      return -1;
        -: 1194:    }
        -: 1195:
        -: 1196:  //added card for [whoseTurn] current player:
        -: 1197:  // toFlag = 0 : add to discard
        -: 1198:  // toFlag = 1 : add to deck
        -: 1199:  // toFlag = 2 : add to hand
        -: 1200:
    #####: 1201:  if (toFlag == 1)
        -: 1202:    {
    #####: 1203:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1204:      state->deckCount[player]++;
    #####: 1205:    }
    #####: 1206:  else if (toFlag == 2)
        -: 1207:    {
    #####: 1208:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1209:      state->handCount[player]++;
    #####: 1210:    }
        -: 1211:  else
        -: 1212:    {
    #####: 1213:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1214:      state->discardCount[player]++;
        -: 1215:    }
        -: 1216:
        -: 1217:  //decrease number in supply pile
    #####: 1218:  state->supplyCount[supplyPos]--;
        -: 1219:
    #####: 1220:  return 0;
    #####: 1221:}
        -: 1222:
        -: 1223:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1224:{
        -: 1225:  int i;
        -: 1226:
        -: 1227:  //reset coin count
        7: 1228:  state->coins = 0;
        -: 1229:
        -: 1230:  //add coins for each Treasure card in player's hand
       68: 1231:  for (i = 0; i < state->handCount[player]; i++)
        -: 1232:    {
       27: 1233:      if (state->hand[player][i] == copper)
        -: 1234:	{
       13: 1235:	  state->coins += 1;
       13: 1236:	}
       14: 1237:      else if (state->hand[player][i] == silver)
        -: 1238:	{
        1: 1239:	  state->coins += 2;
        1: 1240:	}
       13: 1241:      else if (state->hand[player][i] == gold)
        -: 1242:	{
        5: 1243:	  state->coins += 3;
        5: 1244:	}
       27: 1245:    }
        -: 1246:
        -: 1247:  //add bonus
        7: 1248:  state->coins += bonus;
        -: 1249:
        7: 1250:  return 0;
        -: 1251:}
        -: 1252:
        -: 1253:// card effects
        -: 1254:// adventurer card effect
        -: 1255:int adventurerEffect(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1256:    int drawntreasure = 0;
        -: 1257:    int cardDrawn;
        -: 1258:    int temphand[MAX_HAND];
    #####: 1259:    int temphandCounter = 0;
        -: 1260:
        -: 1261:    // keep drawing cards til get 2 treasure
        -: 1262:    // treasures are recorded in hand, while nontreasure are counted in temphand and not recorded in hand
    #####: 1263:    while (drawntreasure < 2) {
    #####: 1264:        drawCard(currentPlayer, state);
        -: 1265:
    #####: 1266:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1]; // top of hand is most recent draw
    #####: 1267:        if (cardDrawn == copper || cardDrawn == silver) {
    #####: 1268:            drawntreasure++;
    #####: 1269:        }
        -: 1270:        else {
    #####: 1271:            temphand[temphandCounter] = cardDrawn;
    #####: 1272:            state->handCount[currentPlayer]--; // not treasure; don't count as adding tot hand
    #####: 1273:            temphandCounter++;
        -: 1274:        }
        -: 1275:    }
        -: 1276:
        -: 1277:    // discard all cards that were recorded in temphand
    #####: 1278:    while (temphandCounter-1 >= 0) {
    #####: 1279:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter-1];
    #####: 1280:        temphandCounter--;
        -: 1281:    }
        -: 1282:
        -: 1283:    // discard this played card
    #####: 1284:    discardCard(handPos, currentPlayer, state, 0);
        -: 1285:
    #####: 1286:    return 0;
        -: 1287:}
        -: 1288:
        -: 1289:// smithy card effect
        -: 1290:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1291:    int i;
        -: 1292:
        -: 1293:    // draw 3 cards
       10: 1294:    for (i = 0; i < 4; i++) {
        4: 1295:        drawCard(currentPlayer, state);
        4: 1296:    }
        -: 1297:
        -: 1298:    // discard this played card
        1: 1299:    discardCard(handPos, currentPlayer, state, 0);
        -: 1300:
        1: 1301:    return 0;
        -: 1302:}
        -: 1303:
        -: 1304:// village card effect
        -: 1305:int villageEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1306:    // +1 card, +2 actions
        1: 1307:    drawCard(currentPlayer, state);
        1: 1308:    state->numActions = state->numBuys+2;
        -: 1309:
        -: 1310:    // discard this played card
        1: 1311:    discardCard(handPos+1, currentPlayer, state, 0);
        -: 1312:
        1: 1313:    return 0;
        -: 1314:}
        -: 1315:
        -: 1316:// council room effect
        -: 1317:int council_roomEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1318:    int i;
        -: 1319:    // +4 cards, +1 buy
       10: 1320:    for (i = 0; i < 4; i++) {
        4: 1321:        drawCard(currentPlayer, state);
        4: 1322:    }
        -: 1323:
        1: 1324:    state->numBuys++;
        -: 1325:
        -: 1326:    // +1 card for other players
        6: 1327:    for (i = 0; i < state->numPlayers; i++) {
        2: 1328:        if (i != currentPlayer)
        1: 1329:            drawCard(i, state);
        2: 1330:    }
        -: 1331:
        -: 1332:    // discard this played card
        1: 1333:    discardCard(handPos, currentPlayer, state, 0);
        -: 1334:
        1: 1335:    return 0;
        -: 1336:}
        -: 1337:
        -: 1338:// remodel card effect
        -: 1339:int remodelEffect(struct gameState *state, int currentPlayer, int handPos, int trashChoice, int gainChoice) {
        -: 1340:    int i;
    #####: 1341:    int trashingCard = state->hand[currentPlayer][trashChoice];
        -: 1342:
        -: 1343:    // if trying to gain a card that costs more than +2 of trashed card, refuse action
    #####: 1344:    if (getCost(gainChoice)+2 > getCost(trashChoice))
    #####: 1345:        return -1;
        -: 1346:
        -: 1347:    // gain chosen card
    #####: 1348:    gainCard(gainChoice, state, 0, currentPlayer);
        -: 1349:
        -: 1350:    // discard card from hand
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:    return 0;
    #####: 1354:}
        -: 1355://end of dominion.c
        -: 1356:
cardtest4.c:

Card Test Suite for Adventurer

** Test 1: function returns correct value **
Expected result: 0. Actual result: 0
TEST PASSED

** Test 2: player should end with 2 more cards in their hands and discards the played card **
Expected hand size: 7. Actual hand size: 7
TEST PASSED

** Test 3: player should have 2 more treasure cards in hand than before **
Expected treasures in hand: 2. Actual treasures: 1
TEST FAILED

** Test 4: player discard pile now has played card **
Expected discard size: 1. Actual discard size: 0
TEST FAILED

** Test 5: player total cards should not change **
Expected player cards: 11. Actual player cards: 10
TEST FAILED

** Test 6: kingdom cards are not affected **
Kingdom card #7 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #13 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #10 expected count: 8. Actual count: 8
TEST PASSED
Kingdom card #19 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #8 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #21 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #11 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #22 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #14 expected count: 10. Actual count: 10
TEST PASSED
Kingdom card #25 expected count: 10. Actual count: 10
TEST PASSED

** Test 7: opponent state does not change **
Expected opponent hand size: 0. Actual hand size: 0
TEST PASSED
Expected opponent deck size: 10. Actual deck size: 10
TEST PASSED
Expected opponent discard size: 0. Actual discard size: 0
TEST PASSED
File 'cardtest4.c'
Lines executed:100.00% of 59
cardtest4.c:creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:29.53% of 640
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      112:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      112:   11:  if (*(int*)a < *(int*)b)
       40:   12:    return -1;
       72:   13:  return 0;
      112:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        5:   23:  int* k = malloc(10 * sizeof(int));
        5:   24:  k[0] = k1;
        5:   25:  k[1] = k2;
        5:   26:  k[2] = k3;
        5:   27:  k[3] = k4;
        5:   28:  k[4] = k5;
        5:   29:  k[5] = k6;
        5:   30:  k[6] = k7;
        5:   31:  k[7] = k8;
        5:   32:  k[8] = k9;
        5:   33:  k[9] = k10;
        5:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        4:   44:  SelectStream(1);
        4:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      760:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      400:   65:        }
       40:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        4:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        4:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        4:  115:		  if (numPlayers == 2){
        4:  116:		    state->supplyCount[i] = 8;
        4:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        4:  119:		}
        -:  120:	      else
        -:  121:		{
       36:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      580:  130:	}
        -:  131:
       80:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        8:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       24:  143:	  state->deck[i][j] = estate;
       24:  144:	  state->deckCount[i]++;
       24:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       56:  148:	  state->deck[i][j] = copper;
       56:  149:	  state->deckCount[i]++;
       56:  150:	}
        8:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        8:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        8:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        8:  166:      state->handCount[i] = 0;
        8:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        8:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
      108:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
       20:  193:    drawCard(state->whoseTurn, state);
       20:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        4:  198:  return 0;
        4:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        8:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        8:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        8:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      176:  214:  while (state->deckCount[player] > 0) {
       80:  215:    card = floor(Random() * state->deckCount[player]);
       80:  216:    newDeck[newDeckPos] = state->deck[player][card];
       80:  217:    newDeckPos++;
      456:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      148:  219:      state->deck[player][i] = state->deck[player][i+1];
      148:  220:    }
       80:  221:    state->deckCount[player]--;
        -:  222:  }
      176:  223:  for (i = 0; i < newDeckPos; i++) {
       80:  224:    state->deck[player][i] = newDeck[i];
       80:  225:    state->deckCount[player]++;
       80:  226:  }
        -:  227:
        8:  228:  return 0;
        8:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        5:  406:	  j++;
        5:  407:	}
      100:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        5:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       32:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       32:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       32:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       32:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       32:  576:    state->deckCount[player]--;
       32:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       32:  580:  return 0;
       32:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card )
        -:  668:    {
        -:  669:    case adventurer:
        1:  670:        return adventurerEffect(state, currentPlayer, handPos);
        -:  671:
        -:  672:    case council_room:
        1:  673:        return council_roomEffect(state, currentPlayer, handPos);
        -:  674:
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:
    #####:  726:      return 0;
        -:  727:
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:
    #####:  764:      return 0;
        -:  765:
        -:  766:    case remodel:
    #####:  767:        return remodelEffect(state, currentPlayer, handPos, choice1, choice2);
        -:  768:
        -:  769:    case smithy:
        1:  770:        return smithyEffect(state, currentPlayer, handPos);
        -:  771:
        -:  772:    case village:
        1:  773:        return villageEffect(state, currentPlayer, handPos);
        -:  774:
        -:  775:    case baron:
    #####:  776:      state->numBuys++;//Increase buys by 1!
    #####:  777:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  778:	int p = 0;//Iterator for hand!
    #####:  779:	int card_not_discarded = 1;//Flag for discard set!
    #####:  780:	while(card_not_discarded){
    #####:  781:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  782:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  783:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  784:	    state->discardCount[currentPlayer]++;
    #####:  785:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  786:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  787:	    }
    #####:  788:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  789:	    state->handCount[currentPlayer]--;
    #####:  790:	    card_not_discarded = 0;//Exit the loop
    #####:  791:	  }
    #####:  792:	  else if (p > state->handCount[currentPlayer]){
        -:  793:	    if(DEBUG) {
        -:  794:	      printf("No estate cards in your hand, invalid choice\n");
        -:  795:	      printf("Must gain an estate if there are any\n");
        -:  796:	    }
    #####:  797:	    if (supplyCount(estate, state) > 0){
    #####:  798:	      gainCard(estate, state, 0, currentPlayer);
    #####:  799:	      state->supplyCount[estate]--;//Decrement estates
    #####:  800:	      if (supplyCount(estate, state) == 0){
    #####:  801:		isGameOver(state);
    #####:  802:	      }
    #####:  803:	    }
    #####:  804:	    card_not_discarded = 0;//Exit the loop
    #####:  805:	  }
        -:  806:
        -:  807:	  else{
    #####:  808:	    p++;//Next card
        -:  809:	  }
        -:  810:	}
    #####:  811:      }
        -:  812:
        -:  813:      else{
    #####:  814:	if (supplyCount(estate, state) > 0){
    #####:  815:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  816:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  817:	  if (supplyCount(estate, state) == 0){
    #####:  818:	    isGameOver(state);
    #####:  819:	  }
    #####:  820:	}
        -:  821:      }
        -:  822:
        -:  823:
    #####:  824:      return 0;
        -:  825:
        -:  826:    case great_hall:
        -:  827:      //+1 Card
    #####:  828:      drawCard(currentPlayer, state);
        -:  829:
        -:  830:      //+1 Actions
    #####:  831:      state->numActions++;
        -:  832:
        -:  833:      //discard card from hand
    #####:  834:      discardCard(handPos, currentPlayer, state, 0);
    #####:  835:      return 0;
        -:  836:
        -:  837:    case minion:
        -:  838:      //+1 action
    #####:  839:      state->numActions++;
        -:  840:
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
        -:  843:
    #####:  844:      if (choice1)		//+2 coins
        -:  845:	{
    #####:  846:	  state->coins = state->coins + 2;
    #####:  847:	}
        -:  848:
    #####:  849:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  850:	{
        -:  851:	  //discard hand
    #####:  852:	  while(numHandCards(state) > 0)
        -:  853:	    {
    #####:  854:	      discardCard(handPos, currentPlayer, state, 0);
        -:  855:	    }
        -:  856:
        -:  857:	  //draw 4
    #####:  858:	  for (i = 0; i < 4; i++)
        -:  859:	    {
    #####:  860:	      drawCard(currentPlayer, state);
    #####:  861:	    }
        -:  862:
        -:  863:	  //other players discard hand and redraw if hand size > 4
    #####:  864:	  for (i = 0; i < state->numPlayers; i++)
        -:  865:	    {
    #####:  866:	      if (i != currentPlayer)
        -:  867:		{
    #####:  868:		  if ( state->handCount[i] > 4 )
        -:  869:		    {
        -:  870:		      //discard hand
    #####:  871:		      while( state->handCount[i] > 0 )
        -:  872:			{
    #####:  873:			  discardCard(handPos, i, state, 0);
        -:  874:			}
        -:  875:
        -:  876:		      //draw 4
    #####:  877:		      for (j = 0; j < 4; j++)
        -:  878:			{
    #####:  879:			  drawCard(i, state);
    #####:  880:			}
    #####:  881:		    }
    #####:  882:		}
    #####:  883:	    }
        -:  884:
    #####:  885:	}
    #####:  886:      return 0;
        -:  887:
        -:  888:    case steward:
    #####:  889:      if (choice1 == 1)
        -:  890:	{
        -:  891:	  //+2 cards
    #####:  892:	  drawCard(currentPlayer, state);
    #####:  893:	  drawCard(currentPlayer, state);
    #####:  894:	}
    #####:  895:      else if (choice1 == 2)
        -:  896:	{
        -:  897:	  //+2 coins
    #####:  898:	  state->coins = state->coins + 2;
    #####:  899:	}
        -:  900:      else
        -:  901:	{
        -:  902:	  //trash 2 cards in hand
    #####:  903:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  904:	  discardCard(choice3, currentPlayer, state, 1);
        -:  905:	}
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
    #####:  909:      return 0;
        -:  910:
        -:  911:    case tribute:
    #####:  912:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  913:	if (state->deckCount[nextPlayer] > 0){
    #####:  914:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:	  state->deckCount[nextPlayer]--;
    #####:  916:	}
    #####:  917:	else if (state->discardCount[nextPlayer] > 0){
    #####:  918:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  919:	  state->discardCount[nextPlayer]--;
    #####:  920:	}
        -:  921:	else{
        -:  922:	  //No Card to Reveal
        -:  923:	  if (DEBUG){
        -:  924:	    printf("No cards to reveal\n");
        -:  925:	  }
        -:  926:	}
    #####:  927:      }
        -:  928:
        -:  929:      else{
    #####:  930:	if (state->deckCount[nextPlayer] == 0){
    #####:  931:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  932:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  933:	    state->deckCount[nextPlayer]++;
    #####:  934:	    state->discard[nextPlayer][i] = -1;
    #####:  935:	    state->discardCount[nextPlayer]--;
    #####:  936:	  }
        -:  937:
    #####:  938:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  939:	}
    #####:  940:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
    #####:  943:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  945:	state->deckCount[nextPlayer]--;
        -:  946:      }
        -:  947:
    #####:  948:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  949:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  950:	state->playedCardCount++;
    #####:  951:	tributeRevealedCards[1] = -1;
    #####:  952:      }
        -:  953:
    #####:  954:      for (i = 0; i <= 2; i ++){
    #####:  955:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  956:	  state->coins += 2;
    #####:  957:	}
        -:  958:
    #####:  959:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  960:	  drawCard(currentPlayer, state);
    #####:  961:	  drawCard(currentPlayer, state);
    #####:  962:	}
        -:  963:	else{//Action Card
    #####:  964:	  state->numActions = state->numActions + 2;
        -:  965:	}
    #####:  966:      }
        -:  967:
    #####:  968:      return 0;
        -:  969:
        -:  970:    case ambassador:
    #####:  971:      j = 0;		//used to check if player has enough cards to discard
        -:  972:
    #####:  973:      if (choice2 > 2 || choice2 < 0)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      if (choice1 == handPos)
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  984:	{
    #####:  985:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  986:	    {
    #####:  987:	      j++;
    #####:  988:	    }
    #####:  989:	}
    #####:  990:      if (j < choice2)
        -:  991:	{
    #####:  992:	  return -1;
        -:  993:	}
        -:  994:
        -:  995:      if (DEBUG)
        -:  996:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  997:
        -:  998:      //increase supply count for choosen card by amount being discarded
    #####:  999:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1000:
        -: 1001:      //each other player gains a copy of revealed card
    #####: 1002:      for (i = 0; i < state->numPlayers; i++)
        -: 1003:	{
    #####: 1004:	  if (i != currentPlayer)
        -: 1005:	    {
    #####: 1006:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1007:	    }
    #####: 1008:	}
        -: 1009:
        -: 1010:      //discard played card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:
        -: 1013:      //trash copies of cards returned to supply
    #####: 1014:      for (j = 0; j < choice2; j++)
        -: 1015:	{
    #####: 1016:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1017:	    {
    #####: 1018:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1019:		{
    #####: 1020:		  discardCard(i, currentPlayer, state, 1);
    #####: 1021:		  break;
        -: 1022:		}
    #####: 1023:	    }
    #####: 1024:	}
        -: 1025:
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case cutpurse:
        -: 1029:
    #####: 1030:      updateCoins(currentPlayer, state, 2);
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
        -: 1034:	    {
    #####: 1035:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1036:		{
    #####: 1037:		  if (state->hand[i][j] == copper)
        -: 1038:		    {
    #####: 1039:		      discardCard(j, i, state, 0);
    #####: 1040:		      break;
        -: 1041:		    }
    #####: 1042:		  if (j == state->handCount[i])
        -: 1043:		    {
    #####: 1044:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1045:			{
        -: 1046:			  if (DEBUG)
        -: 1047:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1048:			}
    #####: 1049:		      break;
        -: 1050:		    }
    #####: 1051:		}
        -: 1052:
    #####: 1053:	    }
        -: 1054:
    #####: 1055:	}
        -: 1056:
        -: 1057:      //discard played card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
        -: 1059:
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:
        -: 1063:    case embargo:
        -: 1064:      //+2 Coins
    #####: 1065:      state->coins = state->coins + 2;
        -: 1066:
        -: 1067:      //see if selected pile is in play
    #####: 1068:      if ( state->supplyCount[choice1] == -1 )
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:
        -: 1073:      //add embargo token to selected supply pile
    #####: 1074:      state->embargoTokens[choice1]++;
        -: 1075:
        -: 1076:      //trash card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:    case outpost:
        -: 1081:      //set outpost flag
    #####: 1082:      state->outpostPlayed++;
        -: 1083:
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1086:      return 0;
        -: 1087:
        -: 1088:    case salvager:
        -: 1089:      //+1 buy
    #####: 1090:      state->numBuys++;
        -: 1091:
    #####: 1092:      if (choice1)
        -: 1093:	{
        -: 1094:	  //gain coins equal to trashed card
    #####: 1095:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1096:	  //trash card
    #####: 1097:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1098:	}
        -: 1099:
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:
        -: 1104:    case sea_hag:
    #####: 1105:      for (i = 0; i < state->numPlayers; i++){
    #####: 1106:	if (i != currentPlayer){
    #####: 1107:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1108:	  state->discardCount[i]++;
    #####: 1109:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1110:	}
    #####: 1111:      }
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case treasure_map:
        -: 1115:      //search hand for another treasure_map
    #####: 1116:      index = -1;
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1118:	{
    #####: 1119:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1120:	    {
    #####: 1121:	      index = i;
    #####: 1122:	      break;
        -: 1123:	    }
    #####: 1124:	}
    #####: 1125:      if (index > -1)
        -: 1126:	{
        -: 1127:	  //trash both treasure cards
    #####: 1128:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1129:	  discardCard(index, currentPlayer, state, 1);
        -: 1130:
        -: 1131:	  //gain 4 Gold cards
    #####: 1132:	  for (i = 0; i < 4; i++)
        -: 1133:	    {
    #####: 1134:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1135:	    }
        -: 1136:
        -: 1137:	  //return success
    #####: 1138:	  return 1;
        -: 1139:	}
        -: 1140:
        -: 1141:      //no second treasure_map found in hand
    #####: 1142:      return -1;
        -: 1143:    }
        -: 1144:
    #####: 1145:  return -1;
        4: 1146:}
        -: 1147:
        -: 1148:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1149:{
        -: 1150:
        -: 1151:  //if card is not trashed, added to Played pile
        4: 1152:  if (trashFlag < 1)
        -: 1153:    {
        -: 1154:      //add card to played pile
        4: 1155:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        4: 1156:      state->playedCardCount++;
        4: 1157:    }
        -: 1158:
        -: 1159:  //set played card to -1
        4: 1160:  state->hand[currentPlayer][handPos] = -1;
        -: 1161:
        -: 1162:  //remove card from player's hand
        4: 1163:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1164:    {
        -: 1165:      //reduce number of cards in hand
    #####: 1166:      state->handCount[currentPlayer]--;
    #####: 1167:    }
        4: 1168:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1169:    {
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
    #####: 1172:    }
        -: 1173:  else
        -: 1174:    {
        -: 1175:      //replace discarded card with last card in hand
        4: 1176:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1177:      //set last card to -1
        4: 1178:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1179:      //reduce number of cards in hand
        4: 1180:      state->handCount[currentPlayer]--;
        -: 1181:    }
        -: 1182:
        4: 1183:  return 0;
        -: 1184:}
        -: 1185:
        -: 1186:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1187:{
        -: 1188:  //Note: supplyPos is enum of choosen card
        -: 1189:
        -: 1190:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1191:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1192:    {
    #####: 1193:      return -1;
        -: 1194:    }
        -: 1195:
        -: 1196:  //added card for [whoseTurn] current player:
        -: 1197:  // toFlag = 0 : add to discard
        -: 1198:  // toFlag = 1 : add to deck
        -: 1199:  // toFlag = 2 : add to hand
        -: 1200:
    #####: 1201:  if (toFlag == 1)
        -: 1202:    {
    #####: 1203:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1204:      state->deckCount[player]++;
    #####: 1205:    }
    #####: 1206:  else if (toFlag == 2)
        -: 1207:    {
    #####: 1208:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1209:      state->handCount[player]++;
    #####: 1210:    }
        -: 1211:  else
        -: 1212:    {
    #####: 1213:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1214:      state->discardCount[player]++;
        -: 1215:    }
        -: 1216:
        -: 1217:  //decrease number in supply pile
    #####: 1218:  state->supplyCount[supplyPos]--;
        -: 1219:
    #####: 1220:  return 0;
    #####: 1221:}
        -: 1222:
        -: 1223:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1224:{
        -: 1225:  int i;
        -: 1226:
        -: 1227:  //reset coin count
        8: 1228:  state->coins = 0;
        -: 1229:
        -: 1230:  //add coins for each Treasure card in player's hand
       80: 1231:  for (i = 0; i < state->handCount[player]; i++)
        -: 1232:    {
       32: 1233:      if (state->hand[player][i] == copper)
        -: 1234:	{
       17: 1235:	  state->coins += 1;
       17: 1236:	}
       15: 1237:      else if (state->hand[player][i] == silver)
        -: 1238:	{
        1: 1239:	  state->coins += 2;
        1: 1240:	}
       14: 1241:      else if (state->hand[player][i] == gold)
        -: 1242:	{
        5: 1243:	  state->coins += 3;
        5: 1244:	}
       32: 1245:    }
        -: 1246:
        -: 1247:  //add bonus
        8: 1248:  state->coins += bonus;
        -: 1249:
        8: 1250:  return 0;
        -: 1251:}
        -: 1252:
        -: 1253:// card effects
        -: 1254:// adventurer card effect
        -: 1255:int adventurerEffect(struct gameState *state, int currentPlayer, int handPos) {
        1: 1256:    int drawntreasure = 0;
        -: 1257:    int cardDrawn;
        -: 1258:    int temphand[MAX_HAND];
        1: 1259:    int temphandCounter = 0;
        -: 1260:
        -: 1261:    // keep drawing cards til get 2 treasure
        -: 1262:    // treasures are recorded in hand, while nontreasure are counted in temphand and not recorded in hand
        6: 1263:    while (drawntreasure < 2) {
        2: 1264:        drawCard(currentPlayer, state);
        -: 1265:
        2: 1266:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1]; // top of hand is most recent draw
        2: 1267:        if (cardDrawn == copper || cardDrawn == silver) {
        2: 1268:            drawntreasure++;
        2: 1269:        }
        -: 1270:        else {
    #####: 1271:            temphand[temphandCounter] = cardDrawn;
    #####: 1272:            state->handCount[currentPlayer]--; // not treasure; don't count as adding tot hand
    #####: 1273:            temphandCounter++;
        -: 1274:        }
        -: 1275:    }
        -: 1276:
        -: 1277:    // discard all cards that were recorded in temphand
        2: 1278:    while (temphandCounter-1 >= 0) {
    #####: 1279:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandCounter-1];
    #####: 1280:        temphandCounter--;
        -: 1281:    }
        -: 1282:
        -: 1283:    // discard this played card
        1: 1284:    discardCard(handPos, currentPlayer, state, 0);
        -: 1285:
        1: 1286:    return 0;
        -: 1287:}
        -: 1288:
        -: 1289:// smithy card effect
        -: 1290:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1291:    int i;
        -: 1292:
        -: 1293:    // draw 3 cards
       10: 1294:    for (i = 0; i < 4; i++) {
        4: 1295:        drawCard(currentPlayer, state);
        4: 1296:    }
        -: 1297:
        -: 1298:    // discard this played card
        1: 1299:    discardCard(handPos, currentPlayer, state, 0);
        -: 1300:
        1: 1301:    return 0;
        -: 1302:}
        -: 1303:
        -: 1304:// village card effect
        -: 1305:int villageEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1306:    // +1 card, +2 actions
        1: 1307:    drawCard(currentPlayer, state);
        1: 1308:    state->numActions = state->numBuys+2;
        -: 1309:
        -: 1310:    // discard this played card
        1: 1311:    discardCard(handPos+1, currentPlayer, state, 0);
        -: 1312:
        1: 1313:    return 0;
        -: 1314:}
        -: 1315:
        -: 1316:// council room effect
        -: 1317:int council_roomEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1318:    int i;
        -: 1319:    // +4 cards, +1 buy
       10: 1320:    for (i = 0; i < 4; i++) {
        4: 1321:        drawCard(currentPlayer, state);
        4: 1322:    }
        -: 1323:
        1: 1324:    state->numBuys++;
        -: 1325:
        -: 1326:    // +1 card for other players
        6: 1327:    for (i = 0; i < state->numPlayers; i++) {
        2: 1328:        if (i != currentPlayer)
        1: 1329:            drawCard(i, state);
        2: 1330:    }
        -: 1331:
        -: 1332:    // discard this played card
        1: 1333:    discardCard(handPos, currentPlayer, state, 0);
        -: 1334:
        1: 1335:    return 0;
        -: 1336:}
        -: 1337:
        -: 1338:// remodel card effect
        -: 1339:int remodelEffect(struct gameState *state, int currentPlayer, int handPos, int trashChoice, int gainChoice) {
        -: 1340:    int i;
    #####: 1341:    int trashingCard = state->hand[currentPlayer][trashChoice];
        -: 1342:
        -: 1343:    // if trying to gain a card that costs more than +2 of trashed card, refuse action
    #####: 1344:    if (getCost(gainChoice)+2 > getCost(trashChoice))
    #####: 1345:        return -1;
        -: 1346:
        -: 1347:    // gain chosen card
    #####: 1348:    gainCard(gainChoice, state, 0, currentPlayer);
        -: 1349:
        -: 1350:    // discard card from hand
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:    return 0;
    #####: 1354:}
        -: 1355://end of dominion.c
        -: 1356:
